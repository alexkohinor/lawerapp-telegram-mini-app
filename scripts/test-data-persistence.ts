/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Data Persistence Layer
 */

import { PrismaClient } from '@prisma/client';
import { DataManager } from '../src/lib/data/data-manager';
import { ConsultationManager } from '../src/lib/data/consultation-manager';
import { DocumentManager } from '../src/lib/data/document-manager';
import { DisputeManager } from '../src/lib/data/dispute-manager';
import { PaymentManager } from '../src/lib/data/payment-manager';
import { NotificationManager } from '../src/lib/data/notification-manager';
import { AnalyticsManager } from '../src/lib/data/analytics-manager';

const prisma = new PrismaClient();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUserId = 'clx0000000000000000000000';
const testTelegramId = BigInt('1234567890');

async function testConsultationManager() {
  console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Consultation Manager...');
  
  try {
    const consultationManager = new ConsultationManager();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const consultation = await consultationManager.createConsultation({
      userId: testUserId,
      question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤—É',
      answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å',
      legalArea: 'civil-law',
      status: 'completed',
      priority: 'medium',
      source: 'manual'
    });
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', consultation.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const foundConsultation = await consultationManager.getConsultationById(consultation.id);
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:', foundConsultation?.id);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const updatedConsultation = await consultationManager.updateConsultation(consultation.id, {
      status: 'completed',
      answer: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç'
    });
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedConsultation.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await consultationManager.getConsultationStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–∞:', stats.total);
    
    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    const searchResults = await consultationManager.searchConsultations('—Ç–µ—Å—Ç–æ–≤—ã–π');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω:', searchResults.length);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const ragConsultation = await consultationManager.createRAGConsultation(
      testUserId,
      'RAG –≤–æ–ø—Ä–æ—Å',
      'civil-law',
      {
        answer: 'RAG –æ—Ç–≤–µ—Ç',
        sources: [{ id: 'src1', title: '–ò—Å—Ç–æ—á–Ω–∏–∫', content: '–ö–æ–Ω—Ç–µ–Ω—Ç', type: 'law', relevance: 0.9 }],
        confidence: 0.9,
        legalReferences: ['–ì–ö –†–§'],
        suggestedActions: ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã']
      }
    );
    console.log('‚úÖ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', ragConsultation.id);
    
    return consultation;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Consultation Manager:', error);
    throw error;
  }
}

async function testDocumentManager() {
  console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Document Manager...');
  
  try {
    const documentManager = new DocumentManager();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = await documentManager.createDocument({
      userId: testUserId,
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      fileName: 'test-document.pdf',
      fileSize: 1024000,
      mimeType: 'application/pdf',
      documentType: 'contract',
      legalArea: 'civil-law',
      status: 'uploaded',
      tags: ['—Ç–µ—Å—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç']
    });
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', document.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const foundDocument = await documentManager.getDocumentById(document.id);
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', foundDocument?.id);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const updatedDocument = await documentManager.updateDocumentStatus(
      document.id,
      'processed',
      { processingTime: 5000, pages: 10 }
    );
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedDocument.status);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    const documentWithTags = await documentManager.addTagsToDocument(
      document.id,
      ['–≤–∞–∂–Ω—ã–π', '–ø–æ–¥–ø–∏—Å–∞–Ω']
    );
    console.log('‚úÖ –¢–µ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:', documentWithTags.tags);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await documentManager.getDocumentStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:', stats.total);
    
    // –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const searchResults = await documentManager.searchDocuments('—Ç–µ—Å—Ç–æ–≤—ã–π');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω:', searchResults.length);
    
    return document;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Document Manager:', error);
    throw error;
  }
}

async function testDisputeManager() {
  console.log('\n‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dispute Manager...');
  
  try {
    const disputeManager = new DisputeManager();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
    const dispute = await disputeManager.createDispute({
      userId: testUserId,
      title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞',
      legalArea: 'consumer-rights',
      status: 'open',
      priority: 'high',
      disputeType: 'consumer',
      estimatedValue: 50000,
      currency: 'RUB',
      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      tags: ['—Ç–µ—Å—Ç', '—Å–ø–æ—Ä']
    });
    console.log('‚úÖ –°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω:', dispute.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä–∞
    const foundDispute = await disputeManager.getDisputeById(dispute.id);
    console.log('‚úÖ –°–ø–æ—Ä –Ω–∞–π–¥–µ–Ω:', foundDispute?.id);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Ä–∞
    const updatedDispute = await disputeManager.updateDisputeStatus(
      dispute.id,
      'in_progress',
      testUserId
    );
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–ø–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedDispute.status);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ timeline
    const timeline = await disputeManager.getDisputeTimeline(dispute.id);
    console.log('‚úÖ Timeline –ø–æ–ª—É—á–µ–Ω:', timeline.length, '—Å–æ–±—ã—Ç–∏–π');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await disputeManager.getDisputeStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞:', stats.total);
    
    // –ü–æ–∏—Å–∫ —Å–ø–æ—Ä–æ–≤
    const searchResults = await disputeManager.searchDisputes('—Ç–µ—Å—Ç–æ–≤—ã–π');
    console.log('‚úÖ –ü–æ–∏—Å–∫ —Å–ø–æ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω:', searchResults.length);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏
    const expiringDisputes = await disputeManager.getDisputesWithExpiringDeadlines(7);
    console.log('‚úÖ –°–ø–æ—Ä—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏:', expiringDisputes.length);
    
    return dispute;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Dispute Manager:', error);
    throw error;
  }
}

async function testPaymentManager() {
  console.log('\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Payment Manager...');
  
  try {
    const paymentManager = new PaymentManager();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const subscriptionPayment = await paymentManager.createSubscriptionPayment(
      testUserId,
      'premium',
      990,
      'RUB',
      'yookassa',
      'ext_payment_123'
    );
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É —Å–æ–∑–¥–∞–Ω:', subscriptionPayment.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const consultationPayment = await paymentManager.createConsultationPayment(
      testUserId,
      500,
      'RUB',
      'yoomoney',
      'consultation_123',
      'ext_payment_456'
    );
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω:', consultationPayment.id);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    const updatedPayment = await paymentManager.updatePaymentStatus(
      subscriptionPayment.id,
      'completed',
      'ext_payment_123'
    );
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedPayment.status);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID
    const foundPayment = await paymentManager.getPaymentByExternalId('ext_payment_123');
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID:', foundPayment?.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await paymentManager.getPaymentStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', stats.total);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const revenue = await paymentManager.getRevenueByPeriod(
      new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      new Date(),
      'day'
    );
    console.log('‚úÖ –î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –ø–æ–ª—É—á–µ–Ω—ã:', revenue.length, '–ø–µ—Ä–∏–æ–¥–æ–≤');
    
    return subscriptionPayment;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Payment Manager:', error);
    throw error;
  }
}

async function testNotificationManager() {
  console.log('\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Notification Manager...');
  
  try {
    const notificationManager = new NotificationManager();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = await notificationManager.createNotification({
      userId: testUserId,
      type: 'info',
      title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      priority: 'medium',
      category: 'system',
      isRead: false,
      actionUrl: '/test',
      actionText: '–ü–µ—Ä–µ–π—Ç–∏'
    });
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', notification.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
    const paymentNotification = await notificationManager.createPaymentNotification(
      testUserId,
      'payment_123',
      'completed',
      990,
      'RUB'
    );
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —Å–æ–∑–¥–∞–Ω–æ:', paymentNotification.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const consultationNotification = await notificationManager.createConsultationNotification(
      testUserId,
      'consultation_123',
      'completed',
      '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å'
    );
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ:', consultationNotification.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–æ—Ä–µ
    const disputeNotification = await notificationManager.createDisputeNotification(
      testUserId,
      'dispute_123',
      'created',
      '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä'
    );
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–æ—Ä–µ —Å–æ–∑–¥–∞–Ω–æ:', disputeNotification.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const documentNotification = await notificationManager.createDocumentNotification(
      testUserId,
      'document_123',
      'processed',
      'test-document.pdf'
    );
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å–æ–∑–¥–∞–Ω–æ:', documentNotification.id);
    
    // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    const readNotification = await notificationManager.markAsRead(notification.id);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:', readNotification.isRead);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const unreadNotifications = await notificationManager.getUnreadNotifications(testUserId);
    console.log('‚úÖ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', unreadNotifications.length);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await notificationManager.getNotificationStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∞:', stats.total);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const cleaned = await notificationManager.cleanupExpiredNotifications();
    console.log('‚úÖ –ò—Å—Ç–µ–∫—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã:', cleaned);
    
    return notification;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Notification Manager:', error);
    throw error;
  }
}

async function testAnalyticsManager() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Analytics Manager...');
  
  try {
    const analyticsManager = new AnalyticsManager();
    
    const period = {
      startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
      endDate: new Date(),
      groupBy: 'day' as const
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userAnalytics = await analyticsManager.getUserAnalytics(period);
    console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', userAnalytics.totalUsers);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const businessAnalytics = await analyticsManager.getBusinessAnalytics(period);
    console.log('‚úÖ –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', businessAnalytics.revenue.total);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const systemAnalytics = await analyticsManager.getSystemAnalytics(period);
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', systemAnalytics.performance.uptime);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    const userTimeSeries = await analyticsManager.getTimeSeriesData('users', period);
    console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω—ã:', userTimeSeries.length);
    
    const revenueTimeSeries = await analyticsManager.getTimeSeriesData('revenue', period);
    console.log('‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–æ—Ö–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', revenueTimeSeries.length);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    const dashboard = await analyticsManager.getAnalyticsDashboard(period);
    console.log('‚úÖ –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω');
    
    return dashboard;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Analytics Manager:', error);
    throw error;
  }
}

async function testDataManager() {
  console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Data Manager (Integration)...');
  
  try {
    const dataManager = new DataManager({
      enableAnalytics: true,
      enableNotifications: true,
      enableCaching: false
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
    const overview = await dataManager.getSystemOverview();
    console.log('‚úÖ –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω:', overview.users.total, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    const consultation = await dataManager.createConsultationWithNotification(
      testUserId,
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
      'civil-law',
      'medium'
    );
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞:', consultation.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    const document = await dataManager.createDocumentWithNotification(
      testUserId,
      {
        title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        fileName: 'integration-test.pdf',
        fileSize: 2048000,
        mimeType: 'application/pdf',
        documentType: 'contract',
        legalArea: 'civil-law'
      }
    );
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω:', document.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    const dispute = await dataManager.createDisputeWithNotification(
      testUserId,
      {
        title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–ø–æ—Ä–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞',
        legalArea: 'consumer-rights',
        priority: 'high',
        disputeType: 'consumer'
      }
    );
    console.log('‚úÖ –°–ø–æ—Ä —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω:', dispute.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    const payment = await dataManager.createPaymentWithNotification(
      testUserId,
      {
        amount: 1500,
        currency: 'RUB',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞',
        paymentMethod: 'yookassa',
        paymentType: 'consultation'
      }
    );
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω:', payment.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const analytics = await dataManager.getSystemAnalytics({
      startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
      endDate: new Date(),
      groupBy: 'day'
    });
    console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userSummary = await dataManager.getUserDataSummary(testUserId);
    console.log('‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–µ–Ω–∞:', userSummary.consultations, '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π');
    
    // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
    const searchResults = await dataManager.searchAll('—Ç–µ—Å—Ç', testUserId, 10);
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω:', searchResults.consultations.length + searchResults.documents.length);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const cleanupResult = await dataManager.cleanupExpiredData();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', cleanupResult.notifications, '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    
    return overview;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Data Manager:', error);
    throw error;
  }
}

async function testDatabaseOperations() {
  console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId,
        telegramUsername: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const testSession = await prisma.session.create({
      data: {
        userId: testUser.id,
        sessionToken: 'test-session-token',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
        isActive: true,
        userAgent: 'Test Agent',
        ipAddress: '127.0.0.1'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testSession.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const testConsultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç',
        status: 'completed'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testConsultation.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const testDocument = await prisma.document.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        fileName: 'test.pdf',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        status: 'uploaded'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', testDocument.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞',
        status: 'open',
        priority: 'medium'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä —Å–æ–∑–¥–∞–Ω:', testDispute.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const testPayment = await prisma.payment.create({
      data: {
        userId: testUser.id,
        amount: 1000,
        currency: 'RUB',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
        paymentMethod: 'yookassa',
        status: 'completed',
        paymentType: 'subscription'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', testPayment.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const testNotification = await prisma.notification.create({
      data: {
        userId: testUser.id,
        type: 'info',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        priority: 'medium',
        category: 'system',
        isRead: false
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', testNotification.id);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.notification.delete({ where: { id: testNotification.id } });
    await prisma.payment.delete({ where: { id: testPayment.id } });
    await prisma.dispute.delete({ where: { id: testDispute.id } });
    await prisma.document.delete({ where: { id: testDocument.id } });
    await prisma.consultation.delete({ where: { id: testConsultation.id } });
    await prisma.session.delete({ where: { id: testSession.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Data Persistence Layer\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
    await testDatabaseOperations();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Consultation Manager
    await testConsultationManager();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Document Manager
    await testDocumentManager();
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º Dispute Manager
    await testDisputeManager();
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º Payment Manager
    await testPaymentManager();
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º Notification Manager
    await testNotificationManager();
    
    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º Analytics Manager
    await testAnalyticsManager();
    
    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º Data Manager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç)
    await testDataManager();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Data Persistence Layer –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
