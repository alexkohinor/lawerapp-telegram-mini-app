#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –°–æ–∑–¥–∞–µ—Ç .env.local, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkCommand(command: string): boolean {
  try {
    execSync(`which ${command}`, { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

function checkNodeVersion(): boolean {
  try {
    const version = execSync('node --version', { encoding: 'utf8' }).trim();
    const majorVersion = parseInt(version.replace('v', '').split('.')[0]);
    if (majorVersion >= 18) {
      log(`‚úÖ Node.js –≤–µ—Ä—Å–∏—è: ${version}`, 'green');
      return true;
    } else {
      log(`‚ùå Node.js –≤–µ—Ä—Å–∏—è ${version} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è. –¢—Ä–µ–±—É–µ—Ç—Å—è 18+`, 'red');
      return false;
    }
  } catch {
    log('‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
    return false;
  }
}

function checkPostgreSQL(): boolean {
  if (checkCommand('psql')) {
    log('‚úÖ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
    return true;
  } else {
    log('‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
    log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL:', 'yellow');
    log('   macOS: brew install postgresql', 'cyan');
    log('   Ubuntu: sudo apt install postgresql postgresql-contrib', 'cyan');
    return false;
  }
}

function createEnvLocal(): void {
  const envLocalPath = path.join(process.cwd(), '.env.local');
  
  if (fs.existsSync(envLocalPath)) {
    log('‚ö†Ô∏è  –§–∞–π–ª .env.local —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'yellow');
    return;
  }

  const envExamplePath = path.join(process.cwd(), 'env.example');
  if (!fs.existsSync(envExamplePath)) {
    log('‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    return;
  }

  let envContent = fs.readFileSync(envExamplePath, 'utf8');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  envContent = envContent
    .replace('TELEGRAM_WEBAPP_URL=https://your-domain.com', 'TELEGRAM_WEBAPP_URL=http://localhost:3000')
    .replace('DATABASE_URL=postgresql://username:password@host:port/database', 'DATABASE_URL=postgresql://lawerapp_user:lawerapp_password@localhost:5432/lawerapp_dev')
    .replace('DIRECT_URL=postgresql://username:password@host:port/database', 'DIRECT_URL=postgresql://lawerapp_user:lawerapp_password@localhost:5432/lawerapp_dev')
    .replace('NEXT_PUBLIC_APP_URL=https://your-domain.com', 'NEXT_PUBLIC_APP_URL=http://localhost:3000')
    .replace('NODE_ENV=development', 'NODE_ENV=development')
    .replace('NEXT_PUBLIC_DEBUG=true', 'NEXT_PUBLIC_DEBUG=true');

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  envContent += '\n# Local Development Security\n';
  envContent += 'NEXTAUTH_SECRET=local_nextauth_secret_key_for_development_only\n';
  envContent += 'NEXTAUTH_URL=http://localhost:3000\n';
  envContent += 'JWT_SECRET=local_jwt_secret_key_for_development_only\n';
  envContent += 'ENCRYPTION_KEY=local_encryption_key_32_chars_long\n';

  fs.writeFileSync(envLocalPath, envContent);
  log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.local —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏', 'green');
}

function setupDatabase(): void {
  log('üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const commands = [
      'psql postgres -c "CREATE DATABASE lawerapp_dev;" 2>/dev/null || true',
      'psql postgres -c "CREATE USER lawerapp_user WITH PASSWORD \'lawerapp_password\';" 2>/dev/null || true',
      'psql postgres -c "GRANT ALL PRIVILEGES ON DATABASE lawerapp_dev TO lawerapp_user;" 2>/dev/null || true',
    ];

    for (const command of commands) {
      try {
        execSync(command, { stdio: 'ignore' });
      } catch {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
      }
    }

    log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö lawerapp_dev –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', 'red');
    log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
    log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω', 'yellow');
  }
}

function installDependencies(): void {
  log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'blue');
  
  try {
    execSync('npm install', { stdio: 'inherit' });
    log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', 'red');
    log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

function generatePrismaClient(): void {
  log('üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞...', 'blue');
  
  try {
    execSync('npx prisma generate', { stdio: 'inherit' });
    log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞:', 'red');
    log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

function testDatabaseConnection(): void {
  log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  try {
    execSync('npm run db:test', { stdio: 'inherit' });
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
  } catch (error) {
    log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', 'red');
    log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
    log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env.local', 'yellow');
  }
}

async function main() {
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ LawerApp', 'bright');
  log('='.repeat(60), 'blue');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...', 'blue');
  
  const nodeOk = checkNodeVersion();
  const postgresOk = checkPostgreSQL();
  
  if (!nodeOk || !postgresOk) {
    log('‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', 'red');
    process.exit(1);
  }

  log('‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', 'green');
  log('');

  // –°–æ–∑–¥–∞–µ–º .env.local
  log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...', 'blue');
  createEnvLocal();
  log('');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  setupDatabase();
  log('');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  installDependencies();
  log('');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
  generatePrismaClient();
  log('');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  testDatabaseConnection();
  log('');

  log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'green');
  log('');
  log('üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'bright');
  log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev', 'cyan');
  log('2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000', 'cyan');
  log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm run bot:polling', 'cyan');
  log('4. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/LOCAL_DEVELOPMENT_SETUP.md', 'cyan');
  log('');
  log('üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'bright');
  log('‚Ä¢ npm run dev          - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'cyan');
  log('‚Ä¢ npm run build        - –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞', 'cyan');
  log('‚Ä¢ npm run db:test      - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î', 'cyan');
  log('‚Ä¢ npm run bot:polling  - –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞', 'cyan');
  log('‚Ä¢ npx prisma studio    - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'cyan');
}

main().catch((error) => {
  log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
  process.exit(1);
});
