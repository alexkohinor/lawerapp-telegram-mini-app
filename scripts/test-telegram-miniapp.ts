/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Mini App
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import https from 'https';
import http from 'http';
import fs from 'fs';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  LOCAL_URL: 'http://localhost:3000',
  
  // Telegram Bot –¥–∞–Ω–Ω—ã–µ
  BOT_TOKEN: '8208499008:AAHd9069cfFeM0OIqWrm86QyM0DEUBbV2z8',
  BOT_USERNAME: 'miniappadvokat_bot',
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  TEST_USER: {
    id: 123456789,
    first_name: 'Test',
    last_name: 'User',
    username: 'testuser',
    language_code: 'ru'
  }
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

interface HttpResponse {
  statusCode: number;
  headers: Record<string, string>;
  data: string;
}

function makeRequest(url: string, options: Record<string, unknown> = {}): Promise<HttpResponse> {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https://');
    const client = isHttps ? https : http;
    
    const req = client.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode || 0,
          headers: res.headers,
          data: data
        });
      });
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => reject(new Error('Request timeout')));
    req.end();
  });
}

async function testLocalApp() {
  log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', 'blue');
  
  try {
    const response = await makeRequest(CONFIG.LOCAL_URL);
    
    if (response.statusCode === 200) {
      log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp —Å–∫—Ä–∏–ø—Ç–∞
      if (response.data.includes('telegram-web-app')) {
        log('‚úÖ Telegram WebApp —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω', 'green');
      } else {
        log('‚ö†Ô∏è  Telegram WebApp —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'yellow');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const checks = [
        { name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ LawerApp', pattern: /LawerApp/i },
        { name: 'Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', pattern: /telegram/i },
        { name: 'React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', pattern: /react/i }
      ];
      
      checks.forEach(check => {
        if (check.pattern.test(response.data)) {
          log(`‚úÖ ${check.name} –Ω–∞–π–¥–µ–Ω`, 'green');
        } else {
          log(`‚ö†Ô∏è  ${check.name} –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'yellow');
        }
      });
      
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞: HTTP ${response.statusCode}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function testTelegramBot() {
  log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Bot...', 'blue');
  
  try {
    const botUrl = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/getMe`;
    const response = await makeRequest(botUrl);
    
    if (response.statusCode === 200) {
      const botInfo = JSON.parse(response.data);
      
      if (botInfo.ok) {
        log('‚úÖ Telegram Bot –∞–∫—Ç–∏–≤–µ–Ω', 'green');
        log(`   –ò–º—è: ${botInfo.result.first_name}`, 'blue');
        log(`   Username: @${botInfo.result.username}`, 'blue');
        log(`   ID: ${botInfo.result.id}`, 'blue');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        await testWebhook();
      } else {
        log(`‚ùå –û—à–∏–±–∫–∞ Bot API: ${botInfo.description}`, 'red');
      }
    } else {
      log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bot API: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function testWebhook() {
  log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Webhook...', 'blue');
  
  try {
    const webhookUrl = `https://api.telegram.org/bot${CONFIG.BOT_TOKEN}/getWebhookInfo`;
    const response = await makeRequest(webhookUrl);
    
    if (response.statusCode === 200) {
      const webhookInfo = JSON.parse(response.data);
      
      if (webhookInfo.ok) {
        const webhook = webhookInfo.result;
        
        if (webhook.url) {
          log('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'green');
          log(`   URL: ${webhook.url}`, 'blue');
          log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhook.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`, 'blue');
          log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${webhook.pending_update_count}`, 'blue');
        } else {
          log('‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'yellow');
        }
      }
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function testMiniAppURL() {
  log('\nüì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Telegram Mini App...', 'blue');
  
  const miniAppUrl = `https://t.me/${CONFIG.BOT_USERNAME}?startapp=lawerapp`;
  log(`üîó URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${miniAppUrl}`, 'green');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const testHtml = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Telegram Mini App</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
        }
        .test-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .success { background: #d4edda; border-color: #c3e6cb; }
        .error { background: #f8d7da; border-color: #f5c6cb; }
        .info { background: #d1ecf1; border-color: #bee5eb; }
        button {
            background: var(--tg-theme-button-color, #007bff);
            color: var(--tg-theme-button-text-color, #ffffff);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <h1>üß™ –¢–µ—Å—Ç Telegram Mini App</h1>
    
    <div class="test-section info">
        <h3>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram</h3>
        <p><strong>–í–µ—Ä—Å–∏—è:</strong> <span id="version">-</span></p>
        <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> <span id="platform">-</span></p>
        <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> <span id="user">-</span></p>
        <p><strong>–¢–µ–º–∞:</strong> <span id="theme">-</span></p>
    </div>
    
    <div class="test-section">
        <h3>üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π</h3>
        <button onclick="testHaptic()">–¢–µ—Å—Ç –≤–∏–±—Ä–∞—Ü–∏–∏</button>
        <button onclick="testAlert()">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</button>
        <button onclick="testExpand()">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å</button>
        <button onclick="testClose()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
    
    <div class="test-section">
        <h3>üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h3>
        <button onclick="testLocalAPI()">–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API</button>
        <button onclick="testDatabase()">–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</button>
        <button onclick="testStorage()">–¢–µ—Å—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</button>
    </div>
    
    <div id="results" class="test-section">
        <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h3>
        <div id="test-results"></div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        const tg = window.Telegram.WebApp;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram
        document.getElementById('version').textContent = tg.version || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        document.getElementById('platform').textContent = tg.platform || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        document.getElementById('user').textContent = tg.initDataUnsafe?.user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        document.getElementById('theme').textContent = tg.colorScheme || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        tg.expand();
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        tg.enableClosingConfirmation();
        
        function addResult(message, type = 'info') {
            const results = document.getElementById('test-results');
            const div = document.createElement('div');
            div.className = \`test-section \${type}\`;
            div.innerHTML = \`<p>\${message}</p>\`;
            results.appendChild(div);
        }
        
        function testHaptic() {
            tg.HapticFeedback.impactOccurred('medium');
            addResult('‚úÖ –í–∏–±—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
        }
        
        function testAlert() {
            tg.showAlert('–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!');
            addResult('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ', 'success');
        }
        
        function testExpand() {
            tg.expand();
            addResult('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ', 'success');
        }
        
        function testClose() {
            tg.close();
        }
        
        async function testLocalAPI() {
            try {
                const response = await fetch('${CONFIG.LOCAL_URL}/api/health');
                if (response.ok) {
                    addResult('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
                } else {
                    addResult('‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'error');
                }
            } catch (error) {
                addResult(\`‚ùå –û—à–∏–±–∫–∞ API: \${error instanceof Error ? error.message : String(error)}\`, 'error');
            }
        }
        
        async function testDatabase() {
            try {
                const response = await fetch('${CONFIG.LOCAL_URL}/api/telegram/webhook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        update_id: 1,
                        message: {
                            message_id: 1,
                            from: ${JSON.stringify(CONFIG.TEST_USER)},
                            chat: { id: ${CONFIG.TEST_USER.id}, type: 'private' },
                            date: Math.floor(Date.now() / 1000),
                            text: '/start'
                        }
                    })
                });
                
                if (response.ok) {
                    addResult('‚úÖ Webhook API —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
                } else {
                    addResult('‚ùå Webhook API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'error');
                }
            } catch (error) {
                addResult(\`‚ùå –û—à–∏–±–∫–∞ Webhook: \${error instanceof Error ? error.message : String(error)}\`, 'error');
            }
        }
        
        async function testStorage() {
            try {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Telegram
                tg.CloudStorage.setItem('test_key', 'test_value');
                const value = tg.CloudStorage.getItem('test_key');
                
                if (value === 'test_value') {
                    addResult('‚úÖ Telegram Cloud Storage —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
                } else {
                    addResult('‚ùå Telegram Cloud Storage –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'error');
                }
            } catch (error) {
                addResult(\`‚ùå –û—à–∏–±–∫–∞ Storage: \${error instanceof Error ? error.message : String(error)}\`, 'error');
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.addEventListener('load', () => {
            addResult('üöÄ Telegram Mini App –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
            addResult(\`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: \${tg.platform}\`, 'info');
            addResult(\`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \${tg.initDataUnsafe?.user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\`, 'info');
        });
    </script>
</body>
</html>`;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  fs.writeFileSync('test-miniapp.html', testHtml);
  log('üìÑ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: test-miniapp.html', 'green');
}

async function runAllTests() {
  log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Mini App', 'bold');
  log('='.repeat(50), 'blue');
  
  await testLocalApp();
  await testTelegramBot();
  await testMiniAppURL();
  
  log('\n' + '='.repeat(50), 'blue');
  log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'green');
  log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'yellow');
  log('1. –û—Ç–∫—Ä–æ–π—Ç–µ test-miniapp.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'blue');
  log('2. –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ Telegram:', 'blue');
  log(`   https://t.me/${CONFIG.BOT_USERNAME}?startapp=lawerapp`, 'green');
  log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Telegram', 'blue');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runAllTests().catch(console.error);
