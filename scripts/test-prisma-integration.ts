/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prisma –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π
 */

import { PrismaClient } from '@prisma/client';
import { RAGPrismaIntegration } from '../src/lib/rag/prisma-integration';
import { RAGServiceWithPrisma } from '../src/lib/rag/rag-service-with-prisma';
import { RAGConfig } from '../src/lib/rag/config';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const ragConfig: RAGConfig = {
  timeWebCloud: {
    apiKey: 'test-key',
    endpoint: 'https://api.timeweb.cloud/vector-db',
    collectionName: 'test-collection'
  },
  objectStorage: {
    accessKeyId: 'test-key',
    secretAccessKey: 'test-secret',
    endpoint: 'https://s3.timeweb.cloud',
    bucketName: 'test-bucket'
  },
  embedding: {
    apiKey: 'test-key',
    endpoint: 'https://api.timeweb.cloud/embedding',
    model: 'text-embedding-ada-002'
  },
  llmModel: 'gpt-4',
  llmEndpoint: 'https://api.openai.com/v1/chat/completions'
};

const prisma = new PrismaClient();
const ragService = new RAGServiceWithPrisma(ragConfig);

async function testDatabaseConnection() {
  console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name LIKE 'lawerapp_%'
    `;
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

async function testUserOperations() {
  console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt(123456789),
        telegramUsername: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    await prisma.user.update({
      where: { id: testUser.id },
      data: { documentsUsed: { increment: 1 } }
    });
    
    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    return testUser;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:', error);
    throw error;
  }
}

async function testRAGConsultation(userId: string) {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const consultation = await prisma.ragConsultation.create({
      data: {
        userId,
        question: '–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –∏–º–µ–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞?',
        answer: '–°–æ–≥–ª–∞—Å–Ω–æ –ó–∞–∫–æ–Ω—É –†–§ "–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π", –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π...',
        legalArea: 'consumer-rights',
        sources: [
          {
            title: '–ó–∞–∫–æ–Ω –†–§ "–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"',
            content: '–°—Ç–∞—Ç—å—è 25...',
            type: 'law',
            relevance: 0.95
          }
        ],
        confidence: 0.92,
        tokensUsed: 150,
        costUsd: 0.0045,
        responseTimeMs: 2500,
        status: 'completed',
        completedAt: new Date()
      }
    });
    
    console.log('‚úÖ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', consultation.id);
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AI
    await prisma.aiMonitoring.create({
      data: {
        consultationId: consultation.id,
        model: 'gpt-4',
        tokensInput: 100,
        tokensOutput: 50,
        responseTimeMs: 2500,
        costUsd: 0.0045
      }
    });
    
    console.log('‚úÖ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω');
    
    return consultation;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
    throw error;
  }
}

async function testDocumentProcessing(userId: string) {
  console.log('\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await prisma.processedDocument.create({
      data: {
        userId,
        originalName: 'test-document.pdf',
        s3Key: 'documents/test-document.pdf',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        chunksCount: 5,
        legalArea: 'consumer-rights',
        documentType: 'contract',
        processingStatus: 'completed',
        vectorDbIds: ['chunk_1', 'chunk_2', 'chunk_3', 'chunk_4', 'chunk_5'],
        processedAt: new Date()
      }
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', document.id);
    
    // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const chunks = await prisma.documentChunk.createMany({
      data: [
        {
          documentId: document.id,
          chunkIndex: 0,
          content: '–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –ø—Ä–∞–≤–∞—Ö –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π...',
          startPosition: 0,
          endPosition: 1000,
          vectorId: 'chunk_1'
        },
        {
          documentId: document.id,
          chunkIndex: 1,
          content: '–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–æ–≤...',
          startPosition: 1000,
          endPosition: 2000,
          vectorId: 'chunk_2'
        }
      ]
    });
    
    console.log('‚úÖ –ß–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã:', chunks.count);
    
    return document;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    throw error;
  }
}

async function testRAGQuery(userId: string) {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞...');
  
  try {
    const query = await prisma.ragQuery.create({
      data: {
        userId,
        query: '–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞?',
        legalArea: 'consumer-rights',
        maxResults: 5,
        threshold: 0.7,
        results: [
          {
            id: 'doc1',
            title: '–ó–∞–∫–æ–Ω –æ –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π',
            content: '–°—Ç–∞—Ç—å—è 18...',
            type: 'law',
            relevance: 0.95
          }
        ]
      }
    });
    
    console.log('‚úÖ RAG –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω:', query.id);
    
    return query;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ RAG –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

async function testRAGPrismaIntegration(userId: string) {
  console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG Prisma Integration...');
  
  try {
    const integration = new RAGPrismaIntegration();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStats = await integration.getUserStats(userId);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞:', userStats);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
    const consultations = await integration.getUserConsultations(userId, 5);
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', consultations.length);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const documents = await integration.getUserProcessedDocuments(userId, 5);
    console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', documents.length);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
    const limits = await integration.checkUserLimits(userId);
    console.log('‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', limits);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    const systemStats = await integration.getSystemStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞:', systemStats);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ RAG Prisma Integration:', error);
    throw error;
  }
}

async function cleanupTestData(userId: string) {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º foreign keys)
    await prisma.aiMonitoring.deleteMany({
      where: {
        consultation: {
          userId
        }
      }
    });
    
    await prisma.documentChunk.deleteMany({
      where: {
        document: {
          userId
        }
      }
    });
    
    await prisma.ragConsultation.deleteMany({
      where: { userId }
    });
    
    await prisma.processedDocument.deleteMany({
      where: { userId }
    });
    
    await prisma.ragQuery.deleteMany({
      where: { userId }
    });
    
    await prisma.user.delete({
      where: { id: userId }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Prisma –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π\n');
  
  let testUserId: string | null = null;
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await testDatabaseConnection();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const testUser = await testUserOperations();
    testUserId = testUser.id;
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    await testRAGConsultation(testUserId);
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await testDocumentProcessing(testUserId);
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å
    await testRAGQuery(testUserId);
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG Prisma Integration
    await testRAGPrismaIntegration(testUserId);
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (testUserId) {
      await cleanupTestData(testUserId);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
