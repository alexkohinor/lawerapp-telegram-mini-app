#!/usr/bin/env tsx

import https from 'https';
import http from 'http';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  red: "\x1b[31m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
  cyan: "\x1b[36m",
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

interface TelegramResponse {
  ok: boolean;
  result?: any;
  description?: string;
}

function makeRequest(url: string, options: any = {}): Promise<TelegramResponse> {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https://');
    const client = isHttps ? https : http;
    
    const req = client.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          resolve(response);
        } catch (error) {
          reject(new Error(`Invalid JSON response: ${data}`));
        }
      });
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => reject(new Error('Request timeout')));
    req.end();
  });
}

async function getBotInfo(): Promise<void> {
  log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...', 'blue');
  
  try {
    const response = await makeRequest(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`
    );
    
    if (response.ok) {
      const bot = response.result;
      log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${bot.username} (${bot.first_name})`, 'green');
      log(`   ID: ${bot.id}`, 'cyan');
      log(`   –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${bot.can_join_groups ? '–î–∞' : '–ù–µ—Ç'}`, 'cyan');
      log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline –∑–∞–ø—Ä–æ—Å—ã: ${bot.supports_inline_queries ? '–î–∞' : '–ù–µ—Ç'}`, 'cyan');
      log(`   –ò–º–µ–µ—Ç –≥–ª–∞–≤–Ω–æ–µ Web App: ${bot.has_main_web_app ? '–î–∞' : '–ù–µ—Ç'}`, 'cyan');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function setBotCommands(): Promise<void> {
  log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...', 'blue');
  
  const commands = [
    { command: "start", description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å LawerApp - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –ø–æ–º–æ—â—å" },
    { command: "help", description: "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞" },
    { command: "info", description: "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LawerApp" },
    { command: "consultation", description: "‚öñÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" },
    { command: "dispute", description: "üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–æ–≤–æ–π —Å–ø–æ—Ä" },
    { command: "documents", description: "üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏" }
  ];
  
  try {
    const response = await makeRequest(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setMyCommands`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    
    if (response.ok) {
      log(`‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (${commands.length} –∫–æ–º–∞–Ω–¥)`, 'green');
      commands.forEach(cmd => {
        log(`   /${cmd.command} - ${cmd.description}`, 'cyan');
      });
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function setWebAppUrl(): Promise<void> {
  const webAppUrl = process.env.TELEGRAM_WEBAPP_URL;
  
  if (!webAppUrl) {
    log('‚ö†Ô∏è TELEGRAM_WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Web App URL.', 'yellow');
    log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: TELEGRAM_WEBAPP_URL=https://your-app.twc1.net', 'cyan');
    return;
  }
  
  log(`üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web App URL: ${webAppUrl}`, 'blue');
  
  try {
    const response = await makeRequest(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebApp`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
    
    if (response.ok) {
      log(`‚úÖ Web App URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${webAppUrl}`, 'green');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Web App URL: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Web App URL: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function getWebAppInfo(): Promise<void> {
  log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Web App...', 'blue');
  
  try {
    const response = await makeRequest(
      `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebApp`
    );
    
    if (response.ok) {
      const webApp = response.result;
      if (webApp && webApp.url) {
        log(`‚úÖ Web App –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${webApp.url}`, 'green');
      } else {
        log(`‚ö†Ô∏è Web App –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`, 'yellow');
      }
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Web App: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Web App: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function testWebAppUrl(): Promise<void> {
  const webAppUrl = process.env.TELEGRAM_WEBAPP_URL;
  
  if (!webAppUrl) {
    log('‚ö†Ô∏è TELEGRAM_WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.', 'yellow');
    return;
  }
  
  log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Web App: ${webAppUrl}`, 'blue');
  
  try {
    const response = await makeRequest(webAppUrl);
    log(`‚úÖ Web App –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.ok ? 'OK' : 'Error'})`, 'green');
  } catch (error) {
    log(`‚ùå Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : String(error)}`, 'red');
    log('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ HTTPS', 'yellow');
  }
}

async function setupMiniAppProduction(): Promise<void> {
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LawerApp Telegram Mini App –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞', 'bright');
  log('='.repeat(60), 'bright');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'red');
    log('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: TELEGRAM_BOT_TOKEN=your_bot_token', 'cyan');
    process.exit(1);
  }
  
  log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: ${process.env.TELEGRAM_BOT_TOKEN.substring(0, 10)}...`, 'cyan');
  
  if (process.env.TELEGRAM_WEBAPP_URL) {
    log(`üåê Web App URL: ${process.env.TELEGRAM_WEBAPP_URL}`, 'cyan');
  } else {
    log('‚ö†Ô∏è TELEGRAM_WEBAPP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'yellow');
  }
  
  log('');
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  await getBotInfo();
  log('');
  
  await setBotCommands();
  log('');
  
  await setWebAppUrl();
  log('');
  
  await getWebAppInfo();
  log('');
  
  await testWebAppUrl();
  log('');
  
  log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini App –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'green');
  log('');
  log('üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'bright');
  log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ @miniappadvokat_bot –≤ Telegram', 'cyan');
  log('2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start', 'cyan');
  log('3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Mini App (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)', 'cyan');
  log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'cyan');
  log('');
  log('üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'bright');
  log('‚Ä¢ npm run dev         - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'cyan');
  log('‚Ä¢ npm run bot:polling - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ', 'cyan');
  log('‚Ä¢ npm run build       - –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞', 'cyan');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
setupMiniAppProduction().catch(error => {
  log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: ${error instanceof Error ? error.message : String(error)}`, 'red');
  process.exit(1);
});
