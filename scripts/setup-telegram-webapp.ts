#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Web App URL
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç URL Mini App –≤ Telegram –±–æ—Ç–µ
 */

import https from 'https';

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

interface TelegramResponse {
  ok: boolean;
  result?: any;
  description?: string;
}

function makeTelegramRequest(method: string, data: any): Promise<TelegramResponse> {
  return new Promise((resolve, reject) => {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      reject(new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'));
      return;
    }

    const postData = JSON.stringify(data);
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${botToken}/${method}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData),
      },
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          resolve(result);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${error instanceof Error ? error.message : String(error)}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();
  });
}

async function getBotInfo(): Promise<void> {
  try {
    log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...', 'blue');
    const response = await makeTelegramRequest('getMe', {});
    
    if (response.ok) {
      const bot = response.result;
      log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${bot.username} (${bot.first_name})`, 'green');
      log(`   ID: ${bot.id}`, 'cyan');
      log(`   –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${bot.can_join_groups ? '–î–∞' : '–ù–µ—Ç'}`, 'cyan');
      log(`   –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: ${bot.can_read_all_group_messages ? '–î–∞' : '–ù–µ—Ç'}`, 'cyan');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function setWebAppUrl(webAppUrl: string): Promise<void> {
  try {
    log(`üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Web App URL: ${webAppUrl}`, 'blue');
    
    const response = await makeTelegramRequest('setWebhook', {
      url: `${webAppUrl}/api/telegram/webhook`,
      allowed_updates: ['message', 'callback_query'],
    });
    
    if (response.ok) {
      log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
      log(`   URL: ${webAppUrl}/api/telegram/webhook`, 'cyan');
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function setBotCommands(): Promise<void> {
  try {
    log('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...', 'blue');
    
    const commands = [
      {
        command: 'start',
        description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å LawerApp - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –ø–æ–º–æ—â—å'
      },
      {
        command: 'help',
        description: '‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞'
      },
      {
        command: 'info',
        description: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LawerApp'
      },
      {
        command: 'consultation',
        description: '‚öñÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
      },
      {
        command: 'dispute',
        description: 'üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–æ–≤–æ–π —Å–ø–æ—Ä'
      },
      {
        command: 'documents',
        description: 'üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏'
      }
    ];
    
    const response = await makeTelegramRequest('setMyCommands', { commands });
    
    if (response.ok) {
      log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
      commands.forEach(cmd => {
        log(`   /${cmd.command} - ${cmd.description}`, 'cyan');
      });
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function getWebhookInfo(): Promise<void> {
  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook...', 'blue');
    
    const response = await makeTelegramRequest('getWebhookInfo', {});
    
    if (response.ok) {
      const webhookInfo = response.result;
      if (webhookInfo.url) {
        log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookInfo.url}`, 'green');
        log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message || '–ù–µ—Ç'}`, 'cyan');
        log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${webhookInfo.pending_update_count}`, 'cyan');
      } else {
        log('‚ö†Ô∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'yellow');
      }
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: ${response.description}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: ${error instanceof Error ? error.message : String(error)}`, 'red');
  }
}

async function main() {
  log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Web App', 'bright');
  log('='.repeat(50), 'blue');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const webAppUrl = process.env.TELEGRAM_WEBAPP_URL || process.env.NEXT_PUBLIC_APP_URL;

  if (!botToken) {
    log('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'red');
    log('   –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env.local', 'yellow');
    process.exit(1);
  }

  if (!webAppUrl) {
    log('‚ùå TELEGRAM_WEBAPP_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'red');
    log('   –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_WEBAPP_URL –≤ .env.local', 'yellow');
    process.exit(1);
  }

  log(`ü§ñ Bot Token: ${botToken.substring(0, 10)}...`, 'cyan');
  log(`üåê Web App URL: ${webAppUrl}`, 'cyan');
  log('');

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  await getBotInfo();
  log('');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
  await setBotCommands();
  log('');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
  await setWebAppUrl(webAppUrl);
  log('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
  await getWebhookInfo();
  log('');

  log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Web App –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'green');
  log('');
  log('üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'bright');
  log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ URL', 'cyan');
  log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start', 'cyan');
  log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É Mini App —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ', 'cyan');
  log('');
  log('üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 'bright');
  log('‚Ä¢ npm run bot:polling  - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ', 'cyan');
  log('‚Ä¢ npm run dev         - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'cyan');
  log('‚Ä¢ npm run build       - –°–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞', 'cyan');
}

main().catch((error) => {
  log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', 'red');
  log(`   ${error instanceof Error ? error.message : String(error)}`, 'red');
  process.exit(1);
});
