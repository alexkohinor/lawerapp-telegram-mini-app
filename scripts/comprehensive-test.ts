#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function comprehensiveTest() {
  console.log('üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π LawerApp...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    console.log('1. üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ\n');

    // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2. üë§ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const uniqueId = Date.now();
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt(uniqueId),
        telegramUsername: `comprehensive_test_${uniqueId}`,
        firstName: 'Comprehensive',
        lastName: 'Test',
        phone: `+7${uniqueId.toString().slice(-10)}`,
        email: `comprehensive_${uniqueId}@test.com`,
      },
    });
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUser.firstName} ${testUser.lastName}\n`);

    // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞
    console.log('3. ‚öñÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞...');
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–ø–æ—Ä–∞',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã',
        type: 'CONSUMER',
        status: 'ACTIVE',
        priority: 'HIGH',
        amount: 30000,
        timeline: {
          create: {
            type: 'CREATED',
            description: '–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            userId: testUser.id,
          },
        },
      },
      include: {
        timeline: true,
      },
    });
    console.log(`‚úÖ –°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω: ${testDispute.title}\n`);

    // 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    console.log('4. üí¨ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...');
    const testConsultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–í–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        answer: '–û—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        status: 'completed',
        legalArea: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
        tokensUsed: 150,
        completedAt: new Date(),
      },
    });
    console.log(`‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${testConsultation.question.substring(0, 50)}...\n`);

    // 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('5. üìÑ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const testDocument = await prisma.document.create({
      data: {
        userId: testUser.id,
        disputeId: testDispute.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        documentType: 'CONTRACT',
        filePath: '/documents/test-document.pdf',
        fileSize: 2048,
        mimeType: 'application/pdf',
        status: 'ACTIVE',
      },
    });
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${testDocument.title}\n`);

    // 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    console.log('6. üí≥ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
    const testPayment = await prisma.payment.create({
      data: {
        userId: testUser.id,
        amount: 5000,
        currency: 'RUB',
        status: 'pending',
        paymentMethod: 'CARD',
        paymentProviderId: `test_${Date.now()}`,
        subscriptionPlan: 'premium',
        subscriptionPeriod: 30,
        metadata: {
          description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
          transactionId: `test_${Date.now()}`,
        },
      },
    });
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ${testPayment.amount} ${testPayment.currency}\n`);

    // 7. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('7. üîî –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    const testNotification = await prisma.notification.create({
      data: {
        userId: testUser.id,
        type: 'DISPUTE_UPDATE',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        isRead: false,
        telegramSent: false,
      },
    });
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${testNotification.title}\n`);

    // 8. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
    console.log('8. üîê –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏...');
    const testSession = await prisma.session.create({
      data: {
        userId: testUser.id,
        sessionToken: `test_token_${Date.now()}`,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞
      },
    });
    console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${testSession.sessionToken.substring(0, 20)}...\n`);

    // 9. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    console.log('9. üè¶ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞...');
    const testAccount = await prisma.account.create({
      data: {
        userId: testUser.id,
        accountId: `account_${Date.now()}`,
        provider: 'telegram',
        providerAccountId: uniqueId.toString(),
        accessToken: 'test_access_token',
        refreshToken: 'test_refresh_token',
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
      },
    });
    console.log(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${testAccount.provider}\n`);

    // 10. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    console.log('10. ü§ñ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    const testAIMonitoring = await prisma.aiMonitoring.create({
      data: {
        consultationId: testConsultation.id,
        model: 'gpt-4',
        tokensInput: 100,
        tokensOutput: 200,
        responseTimeMs: 1500,
        costUsd: 0.08,
        errorMessage: null,
      },
    });
    console.log(`‚úÖ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: ${testAIMonitoring.model}\n`);

    // 11. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å relations
    console.log('11. üìä –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å relations...');
    const userWithAllData = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        disputes: {
          include: {
            documents: true,
            timeline: true,
          },
        },
        consultations: true,
        documents: true,
        payments: true,
        notifications: true,
        sessions: true,
        accounts: true,
      },
    });

    if (userWithAllData) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω:`);
      console.log(`   üë§ –ò–º—è: ${userWithAllData.firstName} ${userWithAllData.lastName}`);
      console.log(`   ‚öñÔ∏è –°–ø–æ—Ä–æ–≤: ${userWithAllData.disputes.length}`);
      console.log(`   üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${userWithAllData.consultations.length}`);
      console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${userWithAllData.documents.length}`);
      console.log(`   üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: ${userWithAllData.payments.length}`);
      console.log(`   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${userWithAllData.notifications.length}`);
      console.log(`   üîê –°–µ—Å—Å–∏–π: ${userWithAllData.sessions.length}`);
      console.log(`   üè¶ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: ${userWithAllData.accounts.length}`);
    }
    console.log('');

    // 12. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('12. üìà –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const stats = {
      totalUsers: await prisma.user.count(),
      totalDisputes: await prisma.dispute.count(),
      totalConsultations: await prisma.consultation.count(),
      totalDocuments: await prisma.document.count(),
      totalPayments: await prisma.payment.count(),
      totalNotifications: await prisma.notification.count(),
      totalSessions: await prisma.session.count(),
      totalAccounts: await prisma.account.count(),
      totalAIMonitoring: await prisma.aiMonitoring.count(),
    };

    console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:');
    Object.entries(stats).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });
    console.log('');

    // 13. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('13. üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.aiMonitoring.deleteMany({
      where: { consultationId: testConsultation.id },
    });
    await prisma.account.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.session.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.notification.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.payment.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.document.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.consultation.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.timelineEvent.deleteMany({
      where: { disputeId: testDispute.id },
    });
    await prisma.dispute.deleteMany({
      where: { userId: testUser.id },
    });
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n');

    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
    console.log('‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ Prisma —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
    console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
comprehensiveTest().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
