#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testDatabaseConnection() {
  console.log('üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    const tables = await prisma.$queryRaw`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name LIKE 'lawerapp_%'
      ORDER BY name;
    `;
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    (tables as any[]).forEach((table: any) => {
      console.log(`   - ${table.name}`);
    });
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    console.log('3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...');
    const userCount = await prisma.user.count();
    const disputeCount = await prisma.dispute.count();
    const consultationCount = await prisma.consultation.count();
    const documentCount = await prisma.document.count();
    const paymentCount = await prisma.payment.count();
    const timelineCount = await prisma.timelineEvent.count();

    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
    console.log(`   ‚öñÔ∏è –°–ø–æ—Ä—ã: ${disputeCount}`);
    console.log(`   üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${consultationCount}`);
    console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: ${documentCount}`);
    console.log(`   üí≥ –ü–ª–∞—Ç–µ–∂–∏: ${paymentCount}`);
    console.log(`   üìÖ –°–æ–±—ã—Ç–∏—è timeline: ${timelineCount}`);
    console.log('');

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏...');
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt(999999999),
        telegramUsername: 'test_user',
        firstName: 'Test',
        lastName: 'User',
        phone: '+79999999999',
        email: 'test@example.com',
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.firstName} ${testUser.lastName} (ID: ${testUser.id})`);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        type: 'OTHER',
        status: 'ACTIVE',
        priority: 'MEDIUM',
        amount: 1000,
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä: ${testDispute.title} (ID: ${testDispute.id})`);

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ timeline —Å–æ–±—ã—Ç–∏—è
    const testTimelineEvent = await prisma.timelineEvent.create({
      data: {
        disputeId: testDispute.id,
        type: 'CREATED',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î',
        userId: testUser.id,
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ timeline —Å–æ–±—ã—Ç–∏–µ: ${testTimelineEvent.description} (ID: ${testTimelineEvent.id})`);

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å relations
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Å relations...');
    const disputeWithRelations = await prisma.dispute.findUnique({
      where: { id: testDispute.id },
      include: {
        user: true,
        documents: true,
        timeline: true,
      },
    });

    if (disputeWithRelations) {
      console.log(`‚úÖ –°–ø–æ—Ä –Ω–∞–π–¥–µ–Ω: ${disputeWithRelations.title}`);
      console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${disputeWithRelations.user.firstName} ${disputeWithRelations.user.lastName}`);
      console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${disputeWithRelations.documents.length}`);
      console.log(`   üìÖ –°–æ–±—ã—Ç–∏–π timeline: ${disputeWithRelations.timeline.length}`);
    }

    // 8. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n6. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.timelineEvent.deleteMany({
      where: { disputeId: testDispute.id },
    });
    await prisma.dispute.delete({
      where: { id: testDispute.id },
    });
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

    // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('\n7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    await prisma.$transaction(async (tx) => {
      const user = await tx.user.create({
        data: {
          telegramId: BigInt(888888888),
          telegramUsername: 'transaction_test',
          firstName: 'Transaction',
          lastName: 'Test',
        },
      });

      const dispute = await tx.dispute.create({
        data: {
          userId: user.id,
          title: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç',
          description: '–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
          type: 'OTHER',
          status: 'ACTIVE',
          priority: 'LOW',
        },
      });

      await tx.timelineEvent.create({
        data: {
          disputeId: dispute.id,
          type: 'CREATED',
          description: '–°–æ–∑–¥–∞–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
          userId: user.id,
        },
      });

      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    });

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await prisma.timelineEvent.deleteMany({
      where: { description: '–°–æ–∑–¥–∞–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' },
    });
    await prisma.dispute.deleteMany({
      where: { title: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç' },
    });
    await prisma.user.deleteMany({
      where: { telegramUsername: 'transaction_test' },
    });

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–î:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDatabaseConnection().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
