/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 */

import { config } from 'dotenv';
import { PrismaClient } from '@prisma/client';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

const prisma = new PrismaClient();

async function testDatabaseConnection() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    console.log('üì° DATABASE_URL:', process.env.DATABASE_URL?.replace(/\/\/.*@/, '//***:***@'));

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL...');
    const version = await prisma.$queryRaw`SELECT version()`;
    console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', version);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name LIKE 'lawerapp_%'
      ORDER BY table_name
    `;
    console.log('üìã –¢–∞–±–ª–∏—Ü—ã LawerApp:', tables);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
    const permissions = await prisma.$queryRaw`
      SELECT 
        table_name,
        privilege_type
      FROM information_schema.table_privileges 
      WHERE grantee = current_user
      AND table_schema = 'public'
      AND table_name LIKE 'lawerapp_%'
      ORDER BY table_name, privilege_type
    `;
    console.log('üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:', permissions);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...');
    try {
      await prisma.$executeRaw`
        CREATE TABLE IF NOT EXISTS lawerapp_test_connection (
          id SERIAL PRIMARY KEY,
          test_message TEXT,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ');

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await prisma.$executeRaw`
        INSERT INTO lawerapp_test_connection (test_message) 
        VALUES ('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è LawerApp - ' || NOW())
      `;
      console.log('‚úÖ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞');

      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const testData = await prisma.$queryRaw`
        SELECT * FROM lawerapp_test_connection 
        ORDER BY created_at DESC 
        LIMIT 1
      `;
      console.log('üìñ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testData);

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      await prisma.$executeRaw`DROP TABLE IF EXISTS lawerapp_test_connection`;
      console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–∞');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error instanceof Error ? error.message : String(error));
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    const startTime = Date.now();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å 10 —Ä–∞–∑
    for (let i = 0; i < 10; i++) {
      await prisma.$queryRaw`SELECT 1 as test`;
    }
    
    const endTime = Date.now();
    const avgTime = (endTime - startTime) / 10;
    console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${avgTime.toFixed(2)}ms`);

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n7Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const dbInfo = await prisma.$queryRaw`
      SELECT 
        pg_database.datname as database_name,
        pg_size_pretty(pg_database_size(pg_database.datname)) as database_size
      FROM pg_database 
      WHERE datname = current_database()
    `;
    console.log('üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î:', dbInfo);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã LawerApp');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.message : String(error));
    
    if (error && typeof error === 'object' && 'code' in error) {
      console.error('üìã –ö–æ–¥ –æ—à–∏–±–∫–∏:', (error as { code: string }).code);
    }
    
    if (error && typeof error === 'object' && 'meta' in error) {
      console.error('üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', (error as { meta: unknown }).meta);
    }

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–∞–π—Ä–≤–æ–ª');

    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testDatabaseConnection()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch(() => {
      console.error('\n‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π');
      process.exit(1);
    });
}

export { testDatabaseConnection };
