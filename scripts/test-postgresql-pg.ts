/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL TimeWeb Cloud —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pg
 */

import { Client } from 'pg';

async function testPostgreSQLConnection() {
  console.log('üêò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL TimeWeb Cloud —Å pg...');
  
  const client = new Client({
    connectionString: 'postgresql://gen_user:6l*Z%3Al%26o!yacZM@5e191ee0e0aee4df539c92a0.twc1.net:5432/default_db?sslmode=disable'
  });
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL TimeWeb Cloud —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ PostgreSQL:');
    tablesResult.rows.forEach((table: any) => {
      console.log(`  - ${table.table_name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCountResult = await client.query('SELECT COUNT(*) as count FROM lawerapp_users');
    console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL:', userCountResult.rows[0].count);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const insertUserResult = await client.query(`
      INSERT INTO lawerapp_users (
        id, telegram_id, telegram_username, first_name, last_name, 
        subscription_plan, is_active, documents_used, created_at, updated_at
      ) VALUES (
        gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
      ) RETURNING id
    `, [
      Math.floor(Math.random() * 9000000000) + 1000000000, // telegram_id
      'test_connection', // telegram_username
      'Test', // first_name
      'Connection', // last_name
      'free', // subscription_plan
      true, // is_active
      0 // documents_used
    ]);
    
    const userId = insertUserResult.rows[0].id;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', userId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const insertConsultationResult = await client.query(`
      INSERT INTO lawerapp_consultations (
        id, user_id, question, answer, status, legal_area, 
        created_at
      ) VALUES (
        gen_random_uuid(), $1, $2, $3, $4, $5, NOW()
      ) RETURNING id
    `, [
      userId, // user_id
      '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å PostgreSQL TimeWeb', // question
      '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç PostgreSQL TimeWeb', // answer
      'completed', // status
      'civil-law' // legal_area
    ]);
    
    const consultationId = insertConsultationResult.rows[0].id;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', consultationId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const insertDocumentResult = await client.query(`
      INSERT INTO lawerapp_documents (
        id, user_id, title, file_path, file_size, mime_type, 
        status, document_type, created_at, updated_at
      ) VALUES (
        gen_random_uuid(), $1, $2, $3, $4, $5, $6, $7, NOW(), NOW()
      ) RETURNING id
    `, [
      userId, // user_id
      '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç PostgreSQL TimeWeb', // title
      'test-postgresql-timeweb.pdf', // file_path
      1024000, // file_size
      'application/pdf', // mime_type
      'uploaded', // status
      'contract' // document_type
    ]);
    
    const documentId = insertDocumentResult.rows[0].id;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', documentId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
    const insertDisputeResult = await client.query(`
      INSERT INTO lawerapp_disputes (
        id, user_id, title, description, status, 
        type, priority, created_at, updated_at
      ) VALUES (
        gen_random_uuid(), $1, $2, $3, $4, $5, $6, NOW(), NOW()
      ) RETURNING id
    `, [
      userId, // user_id
      '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä PostgreSQL TimeWeb', // title
      '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞ PostgreSQL TimeWeb', // description
      'open', // status
      'consumer', // type
      'medium' // priority
    ]);
    
    const disputeId = insertDisputeResult.rows[0].id;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', disputeId);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å JOIN
    const userWithRelationsResult = await client.query(`
      SELECT 
        u.id, u.first_name, u.last_name,
        COUNT(c.id) as consultations_count,
        COUNT(d.id) as documents_count,
        COUNT(dis.id) as disputes_count
      FROM lawerapp_users u
      LEFT JOIN lawerapp_consultations c ON u.id = c.user_id
      LEFT JOIN lawerapp_documents d ON u.id = d.user_id
      LEFT JOIN lawerapp_disputes dis ON u.id = dis.user_id
      WHERE u.id = $1
      GROUP BY u.id, u.first_name, u.last_name
    `, [userId]);
    
    const userData = userWithRelationsResult.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω:', {
      consultations: userData.consultations_count,
      documents: userData.documents_count,
      disputes: userData.disputes_count
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL TimeWeb...');
    const startTime = Date.now();
    
    const allUsersResult = await client.query(`
      SELECT 
        u.id, u.first_name, u.last_name,
        COUNT(c.id) as consultations_count,
        COUNT(d.id) as documents_count,
        COUNT(dis.id) as disputes_count
      FROM lawerapp_users u
      LEFT JOIN lawerapp_consultations c ON u.id = c.user_id
      LEFT JOIN lawerapp_documents d ON u.id = d.user_id
      LEFT JOIN lawerapp_disputes dis ON u.id = dis.user_id
      GROUP BY u.id, u.first_name, u.last_name
    `);
    
    const queryTime = Date.now() - startTime;
    console.log(`‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN: ${queryTime}ms`);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsersResult.rows.length}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ PostgreSQL TimeWeb...');
    await client.query('BEGIN');
    
    try {
      const paymentResult = await client.query(`
        INSERT INTO lawerapp_payments (
          id, user_id, amount, currency, 
          payment_method, status, subscription_plan, created_at, completed_at
        ) VALUES (
          gen_random_uuid(), $1, $2, $3, $4, $5, $6, NOW(), NOW()
        ) RETURNING id
      `, [
        userId, // user_id
        1000, // amount
        'RUB', // currency
        'yookassa', // payment_method
        'completed', // status
        'premium' // subscription_plan
      ]);
      
      const notificationResult = await client.query(`
        INSERT INTO lawerapp_notifications (
          id, user_id, type, title, message, 
          is_read, created_at
        ) VALUES (
          gen_random_uuid(), $1, $2, $3, $4, $5, NOW()
        ) RETURNING id
      `, [
        userId, // user_id
        'info', // type
        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ', // title
        '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', // message
        false // is_read
      ]);
      
      await client.query('COMMIT');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è PostgreSQL TimeWeb –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
        paymentId: paymentResult.rows[0].id,
        notificationId: notificationResult.rows[0].id
      });
      
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö PostgreSQL TimeWeb...');
    await client.query('DELETE FROM lawerapp_notifications WHERE user_id = $1', [userId]);
    await client.query('DELETE FROM lawerapp_payments WHERE user_id = $1', [userId]);
    await client.query('DELETE FROM lawerapp_disputes WHERE user_id = $1', [userId]);
    await client.query('DELETE FROM lawerapp_documents WHERE user_id = $1', [userId]);
    await client.query('DELETE FROM lawerapp_consultations WHERE user_id = $1', [userId]);
    await client.query('DELETE FROM lawerapp_users WHERE id = $1', [userId]);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏–∑ PostgreSQL TimeWeb');
    
    await client.end();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL TimeWeb –∑–∞–∫—Ä—ã—Ç–æ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL TimeWeb Cloud:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('ECONNREFUSED')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      } else if (error.message.includes('ENOTFOUND')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç PostgreSQL');
      } else if (error.message.includes('authentication failed')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PostgreSQL');
      } else if (error.message.includes('database') && error.message.includes('does not exist')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else if (error.message.includes('relation') && error.message.includes('does not exist')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
        console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx prisma migrate deploy');
      }
    }
    
    await client.end();
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL TimeWeb Cloud —Å pg\n');
  
  try {
    const result = await testPostgreSQLConnection();
    
    if (result) {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL TimeWeb Cloud –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏–µ–º–ª–µ–º–∞—è');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL TimeWeb Cloud –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TimeWeb Cloud');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL');
      console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma migrate deploy');
    }
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
