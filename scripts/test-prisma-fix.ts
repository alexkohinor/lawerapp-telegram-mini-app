/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Prisma Data Proxy –ø—Ä–æ–±–ª–µ–º—ã
 */

import { PrismaClient } from '@prisma/client';

async function testPrismaConnection() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Prisma Data Proxy...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Prisma Client —Å —è–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL
        }
      },
      log: ['query', 'error', 'warn'],
      errorFormat: 'pretty',
    });
    
    console.log('‚úÖ Prisma Client —Å–æ–∑–¥–∞–Ω');
    console.log('üìä DATABASE_URL:', process.env.DATABASE_URL?.substring(0, 20) + '...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const userCount = await prisma.user.count();
    console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userCount);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt('1234567890'),
        telegramUsername: 'test_fix',
        firstName: 'Test',
        lastName: 'Fix',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ
    const user = await prisma.user.findUnique({
      where: { id: testUser.id }
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—á–∏—Ç–∞–Ω:', user?.firstName);
    
    // –û—á–∏—â–∞–µ–º
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
    
    await prisma.$disconnect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Prisma\n');
  
  const result = await testPrismaConnection();
  
  if (result) {
    console.log('\nüéâ Prisma Data Proxy –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
  } else {
    console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Prisma Data Proxy –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
  }
}

main().catch(console.error);
