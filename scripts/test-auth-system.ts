/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

import { PrismaClient } from '@prisma/client';
import { TelegramAuthService } from '../src/lib/auth/telegram-auth';
import { SessionManager } from '../src/lib/auth/session-manager';
import { SubscriptionManager } from '../src/lib/auth/subscription-manager';
import { UsageLimitsManager } from '../src/lib/auth/usage-limits-manager';
import { UserManager } from '../src/lib/auth/user-manager';

const prisma = new PrismaClient();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testBotToken = 'test-bot-token';
const testTelegramAuthData = {
  id: 123456789,
  first_name: 'Test',
  last_name: 'User',
  username: 'testuser',
  photo_url: 'https://example.com/photo.jpg',
  auth_date: Math.floor(Date.now() / 1000),
  hash: 'test-hash'
};

async function testTelegramAuth() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Authentication...');
  
  try {
    const telegramAuth = new TelegramAuthService(testBotToken);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await telegramAuth.authenticateUser(testTelegramAuthData);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', user.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const foundUser = await telegramAuth.getUserByTelegramId(testTelegramAuthData.id);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID:', foundUser?.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedUser = await telegramAuth.updateUserProfile(user.id, {
      firstName: 'Updated',
      lastName: 'Name'
    });
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser.firstName);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await telegramAuth.getUserStats(user.id);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞:', stats);
    
    return user;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram Auth:', error);
    throw error;
  }
}

async function testSessionManager() {
  console.log('\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Session Manager...');
  
  try {
    const sessionManager = new SessionManager();
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    const session = await sessionManager.createSession({
      userId: 'test-user-id',
      telegramId: BigInt(123456789),
      userAgent: 'Test Agent',
      ipAddress: '127.0.0.1'
    });
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session.id);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    const validatedSession = await sessionManager.validateSession(session.sessionToken);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞:', validatedSession?.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const refreshedSession = await sessionManager.refreshSession(session.sessionToken, 48);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', refreshedSession?.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    const activeSessions = await sessionManager.getUserActiveSessions('test-user-id');
    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', activeSessions.length);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    const terminated = await sessionManager.terminateSession(session.sessionToken);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', terminated);
    
    return session;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Session Manager:', error);
    throw error;
  }
}

async function testSubscriptionManager() {
  console.log('\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Subscription Manager...');
  
  try {
    const subscriptionManager = new SubscriptionManager();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∞—Ö
    const allPlans = subscriptionManager.getAllPlans();
    console.log('‚úÖ –í—Å–µ –ø–ª–∞–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:', Object.keys(allPlans));
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–ª–∞–Ω–µ
    const premiumInfo = subscriptionManager.getSubscriptionInfo('premium');
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –ø–ª–∞–Ω–µ:', premiumInfo.plan);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∫)
    const userSubscription = await subscriptionManager.getUserSubscription('test-user-id');
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞:', userSubscription.plan);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const updatedSubscription = await subscriptionManager.updateUserSubscription(
      'test-user-id',
      'premium',
      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 –¥–Ω–µ–π
    );
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedSubscription.plan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const limits = await subscriptionManager.checkUserLimits('test-user-id');
    console.log('‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', limits.plan);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    const stats = await subscriptionManager.getSubscriptionStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–∞:', stats.totalUsers);
    
    return updatedSubscription;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Subscription Manager:', error);
    throw error;
  }
}

async function testUsageLimitsManager() {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Usage Limits Manager...');
  
  try {
    const usageLimitsManager = new UsageLimitsManager();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const limits = await usageLimitsManager.checkUserLimits('test-user-id');
    console.log('‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', limits.plan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
    const canUseDocuments = await usageLimitsManager.canUseResource('test-user-id', 'documents');
    console.log('‚úÖ –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã:', canUseDocuments);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await usageLimitsManager.incrementUsage('test-user-id', 'documents', 1);
    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const globalStats = await usageLimitsManager.getGlobalUsageStats();
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', globalStats.totalDocuments);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
    const violations = await usageLimitsManager.checkLimitViolations();
    console.log('‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', violations.length);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
    const recommendations = await usageLimitsManager.getUpgradeRecommendations('test-user-id');
    console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', recommendations.recommendedPlan);
    
    return limits;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Usage Limits Manager:', error);
    throw error;
  }
}

async function testUserManager() {
  console.log('\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User Manager...');
  
  try {
    const userManager = new UserManager(testBotToken);
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const authResult = await userManager.authenticateUser({
      telegramAuthData: testTelegramAuthData,
      userAgent: 'Test Agent',
      ipAddress: '127.0.0.1'
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ UserManager:', authResult.user.id);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    const validatedAuth = await userManager.validateSession(authResult.session.sessionToken);
    console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ UserManager:', validatedAuth?.user.id);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profile = await userManager.getUserProfile(authResult.user.id);
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', profile.id);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const updatedProfile = await userManager.updateUserProfile(authResult.user.id, {
      firstName: 'Updated',
      lastName: 'Profile'
    });
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedProfile.firstName);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const updatedSubscription = await userManager.updateSubscription(
      authResult.user.id,
      'premium',
      new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
    );
    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedSubscription.subscription.plan);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    const limits = await userManager.checkUserLimits(authResult.user.id);
    console.log('‚úÖ –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:', limits.plan);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    const systemStats = await userManager.getSystemStats();
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞:', systemStats.users.total);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const cleanupResult = await userManager.cleanupExpiredData();
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', cleanupResult);
    
    // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const logoutResult = await userManager.logout(authResult.session.sessionToken);
    console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', logoutResult);
    
    return authResult;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ User Manager:', error);
    throw error;
  }
}

async function testDatabaseOperations() {
  console.log('\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt(999999999),
        telegramUsername: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const testSession = await prisma.session.create({
      data: {
        userId: testUser.id,
        sessionToken: 'test-session-token',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
        isActive: true,
        userAgent: 'Test Agent',
        ipAddress: '127.0.0.1'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testSession.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const testConsultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç',
        status: 'completed'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testConsultation.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞',
        status: 'open',
        priority: 'medium'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä —Å–æ–∑–¥–∞–Ω:', testDispute.id);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.consultation.delete({ where: { id: testConsultation.id } });
    await prisma.dispute.delete({ where: { id: testDispute.id } });
    await prisma.session.delete({ where: { id: testSession.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
    await testDatabaseOperations();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram Auth
    const user = await testTelegramAuth();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º Session Manager
    await testSessionManager();
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º Subscription Manager
    await testSubscriptionManager();
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º Usage Limits Manager
    await testUsageLimitsManager();
    
    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º User Manager (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç)
    await testUserManager();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
