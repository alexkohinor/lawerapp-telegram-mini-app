/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
 */

import { PrismaClient } from '@prisma/client';

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
async function testPostgreSQLConnection() {
  console.log('üêò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É PostgreSQL
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: process.env.DATABASE_URL || 'postgresql://user:password@localhost:5432/lawerapp'
        }
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ PostgreSQL:');
    (tables as any[]).forEach((table: any) => {
      console.log(`  - ${table.table_name}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const userCount = await prisma.user.count();
    console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL:', userCount);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt('9999999999'),
        telegramUsername: 'test_connection',
        firstName: 'Test',
        lastName: 'Connection',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', testUser.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const consultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å PostgreSQL',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç PostgreSQL',
        status: 'completed',
        legalArea: 'civil-law'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', consultation.id);
    
    const document = await prisma.document.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç PostgreSQL',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        status: 'uploaded',
        documentType: 'contract'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', document.id);
    
    const dispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä PostgreSQL',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞ PostgreSQL',
        status: 'ACTIVE',
        type: 'CONSUMER'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', dispute.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const userWithRelations = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        consultations: true,
        documents: true,
        disputes: true
      }
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω:', {
      consultations: userWithRelations?.consultations.length,
      documents: userWithRelations?.documents.length,
      disputes: userWithRelations?.disputes.length
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –º–æ–¥–µ–ª–∏
    const ragConsultation = await prisma.rAGConsultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π RAG –≤–æ–ø—Ä–æ—Å PostgreSQL',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π RAG –æ—Ç–≤–µ—Ç PostgreSQL',
        legalArea: 'civil-law',
        sources: { documents: ['doc1'], laws: ['law1'] },
        confidence: 0.95,
        tokensUsed: 1500,
        costUsd: 0.05,
        responseTimeMs: 2000,
        status: 'completed'
      }
    });
    console.log('‚úÖ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', ragConsultation.id);
    
    const processedDocument = await prisma.processedDocument.create({
      data: {
        userId: testUser.id,
        originalName: 'test-rag-postgresql.pdf',
        s3Key: 'documents/test-rag-postgresql.pdf',
        fileSize: 2048000,
        mimeType: 'application/pdf',
        chunksCount: 5,
        legalArea: 'civil-law',
        documentType: 'contract',
        processingStatus: 'completed',
        vectorDbIds: ['vec1', 'vec2', 'vec3']
      }
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', processedDocument.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    const aiMonitoring = await prisma.aiMonitoring.create({
      data: {
        ragConsultationId: ragConsultation.id,
        model: 'gpt-4',
        tokensInput: 1000,
        tokensOutput: 500,
        responseTimeMs: 2000,
        costUsd: 0.05
      }
    });
    console.log('‚úÖ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', aiMonitoring.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL...');
    const startTime = Date.now();
    
    const allUsers = await prisma.user.findMany({
      include: {
        consultations: true,
        documents: true,
        disputes: true,
        ragConsultations: true,
        processedDocuments: true
      }
    });
    
    const queryTime = Date.now() - startTime;
    console.log(`‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: ${queryTime}ms`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ PostgreSQL...');
    const transactionResult = await prisma.$transaction(async (tx) => {
      const payment = await tx.payment.create({
        data: {
          userId: testUser.id,
          amount: 1000,
          currency: 'RUB',
          paymentMethod: 'yookassa',
          status: 'completed',
          subscriptionPlan: 'premium'
        }
      });
      
      const notification = await tx.notification.create({
        data: {
          userId: testUser.id,
          type: 'info',
          title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ',
          message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
          isRead: false
        }
      });
      
      return { payment, notification };
    });
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è PostgreSQL –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
      paymentId: transactionResult.payment.id,
      notificationId: transactionResult.notification.id
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö PostgreSQL...');
    await prisma.aiMonitoring.delete({ where: { id: aiMonitoring.id } });
    await prisma.processedDocument.delete({ where: { id: processedDocument.id } });
    await prisma.rAGConsultation.delete({ where: { id: ragConsultation.id } });
    await prisma.notification.delete({ where: { id: transactionResult.notification.id } });
    await prisma.payment.delete({ where: { id: transactionResult.payment.id } });
    await prisma.dispute.delete({ where: { id: dispute.id } });
    await prisma.document.delete({ where: { id: document.id } });
    await prisma.consultation.delete({ where: { id: consultation.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏–∑ PostgreSQL');
    
    await prisma.$disconnect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('ECONNREFUSED')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      } else if (error.message.includes('ENOTFOUND')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç PostgreSQL');
      } else if (error.message.includes('authentication failed')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PostgreSQL');
      } else if (error.message.includes('database') && error.message.includes('does not exist')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë');
      }
    }
    
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvironmentVariables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const requiredVars = [
    'DATABASE_URL',
    'PRISMA_GENERATE_DATAPROXY',
    'PRISMA_QUERY_ENGINE_LIBRARY'
  ];
  
  const missingVars = requiredVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏');
    return false;
  }
  
  console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
  return true;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = checkEnvironmentVariables();
    if (!envCheck) {
      console.log('\n‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    const result = await testPostgreSQLConnection();
    
    if (result) {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ RAG –º–æ–¥–µ–ª–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏–µ–º–ª–µ–º–∞—è');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL');
      console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma migrate deploy');
    }
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
