/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö LawerApp
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL –∏–∑ advokat-fomin.ru
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function initDatabase() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö LawerApp...');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)
    console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    const schemaPath = path.join(__dirname, '../src/lib/database/schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = schema
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    for (const command of commands) {
      if (command.trim()) {
        try {
          await prisma.$executeRawUnsafe(command);
          console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${command.substring(0, 50)}...`);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          if (error instanceof Error && !error.message.includes('already exists')) {
            console.warn(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${error.message}`);
          }
        }
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    await prisma.$executeRawUnsafe(`
      CREATE INDEX IF NOT EXISTS idx_lawerapp_users_telegram_id ON lawerapp_users(telegram_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_consultations_user_id ON lawerapp_consultations(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_consultations_status ON lawerapp_consultations(status);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_disputes_user_id ON lawerapp_disputes(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_disputes_status ON lawerapp_disputes(status);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_documents_user_id ON lawerapp_documents(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_payments_user_id ON lawerapp_payments(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_payments_status ON lawerapp_payments(status);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_notifications_user_id ON lawerapp_notifications(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_notifications_is_read ON lawerapp_notifications(is_read);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_sessions_user_id ON lawerapp_sessions(user_id);
      CREATE INDEX IF NOT EXISTS idx_lawerapp_sessions_expires_at ON lawerapp_sessions(expires_at);
    `);

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = await prisma.user.upsert({
      where: { telegramId: 123456789 },
      update: {},
      create: {
        telegramId: 123456789,
        telegramUsername: 'test_user',
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        subscriptionPlan: 'premium',
        subscriptionExpiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.firstName} ${testUser.lastName}`);

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏...');
    const testConsultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?',
        answer: '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ...',
        legalArea: 'labor',
        status: 'completed',
        tokensUsed: 150,
        completedAt: new Date(),
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: ${testConsultation.id}`);

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä
    console.log('‚öñÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞...');
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–°–ø–æ—Ä —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º –æ –∑–∞—Ä–ø–ª–∞—Ç–µ',
        description: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø—Ä–µ–º–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—É',
        legalArea: 'labor',
        status: 'active',
        priority: 'high',
        estimatedValue: 50000,
      },
    });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä: ${testDispute.title}`);

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const userCount = await prisma.user.count();
    const consultationCount = await prisma.consultation.count();
    const disputeCount = await prisma.dispute.count();
    const documentCount = await prisma.document.count();
    const paymentCount = await prisma.payment.count();

    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}`);
    console.log(`üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${consultationCount}`);
    console.log(`‚öñÔ∏è –°–ø–æ—Ä—ã: ${disputeCount}`);
    console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: ${documentCount}`);
    console.log(`üí≥ –ü–ª–∞—Ç–µ–∂–∏: ${paymentCount}`);

    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
if (require.main === module) {
  initDatabase()
    .then(() => {
      console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}

export { initDatabase };
