#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testDisputesAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è —Å–ø–æ—Ä–æ–≤...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt(123456789),
        telegramUsername: 'api_test_user',
        firstName: 'API',
        lastName: 'Test',
        phone: '+71234567890',
        email: 'api@test.com',
      },
    });
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUser.firstName} ${testUser.lastName} (ID: ${testUser.id})\n`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ —á–µ—Ä–µ–∑ Prisma (–∏–º–∏—Ç–∞—Ü–∏—è API)
    console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞...');
    const newDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: 'API –¢–µ—Å—Ç - –°–ø–æ—Ä —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º',
        description: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø—Ä–µ–º–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É.',
        type: 'LABOR',
        status: 'ACTIVE',
        priority: 'HIGH',
        amount: 50000,
        timeline: {
          create: {
            type: 'CREATED',
            description: '–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç',
            userId: testUser.id,
          },
        },
      },
      include: {
        timeline: true,
      },
    });
    console.log(`‚úÖ –°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω: ${newDispute.title}`);
    console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${newDispute.status}`);
    console.log(`   ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${newDispute.priority}`);
    console.log(`   üí∞ –°—É–º–º–∞: ${newDispute.amount} —Ä—É–±.`);
    console.log(`   üìÖ –°–æ–±—ã—Ç–∏–π timeline: ${newDispute.timeline.length}\n`);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤...');
    const disputes = await prisma.dispute.findMany({
      where: { userId: testUser.id },
      include: {
        documents: true,
        timeline: {
          orderBy: { createdAt: 'desc' },
          take: 5,
        },
      },
      orderBy: { createdAt: 'desc' },
    });
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Ä–æ–≤: ${disputes.length}`);
    disputes.forEach((dispute, index) => {
      console.log(`   ${index + 1}. ${dispute.title} (${dispute.status})`);
    });
    console.log('');

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–∞
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Ä–∞...');
    const updatedDispute = await prisma.dispute.update({
      where: { id: newDispute.id },
      data: {
        status: 'PENDING',
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç',
      },
    });
    console.log(`‚úÖ –°–ø–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedDispute.title}`);
    console.log(`   üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updatedDispute.status}\n`);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ timeline —Å–æ–±—ã—Ç–∏—è
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timeline —Å–æ–±—ã—Ç–∏—è...');
    const timelineEvent = await prisma.timelineEvent.create({
      data: {
        disputeId: newDispute.id,
        type: 'STATUS_CHANGED',
        description: '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å ACTIVE –Ω–∞ PENDING',
        userId: testUser.id,
      },
    });
    console.log(`‚úÖ Timeline —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${timelineEvent.description}\n`);

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const fullDispute = await prisma.dispute.findUnique({
      where: { id: newDispute.id },
      include: {
        user: true,
        documents: true,
        timeline: {
          orderBy: { createdAt: 'desc' },
        },
      },
    });

    if (fullDispute) {
      console.log(`‚úÖ –°–ø–æ—Ä –ø–æ–ª—É—á–µ–Ω: ${fullDispute.title}`);
      console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullDispute.user.firstName} ${fullDispute.user.lastName}`);
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${fullDispute.status}`);
      console.log(`   ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${fullDispute.priority}`);
      console.log(`   üí∞ –°—É–º–º–∞: ${fullDispute.amount} —Ä—É–±.`);
      console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${fullDispute.documents.length}`);
      console.log(`   üìÖ –°–æ–±—ã—Ç–∏–π timeline: ${fullDispute.timeline.length}`);
      console.log('   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:');
      fullDispute.timeline.slice(0, 3).forEach((event, index) => {
        console.log(`      ${index + 1}. ${event.description} (${event.type})`);
      });
    }
    console.log('');

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–ø–æ—Ä–æ–≤
    console.log('7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä–æ–≤...');
    const activeDisputes = await prisma.dispute.findMany({
      where: {
        userId: testUser.id,
        status: 'ACTIVE',
      },
    });
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤: ${activeDisputes.length}`);

    const highPriorityDisputes = await prisma.dispute.findMany({
      where: {
        userId: testUser.id,
        priority: 'HIGH',
      },
    });
    console.log(`‚úÖ –°–ø–æ—Ä–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: ${highPriorityDisputes.length}`);

    const laborDisputes = await prisma.dispute.findMany({
      where: {
        userId: testUser.id,
        type: 'LABOR',
      },
    });
    console.log(`‚úÖ –¢—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤: ${laborDisputes.length}\n`);

    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    console.log('8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...');
    const page1 = await prisma.dispute.findMany({
      where: { userId: testUser.id },
      orderBy: { createdAt: 'desc' },
      take: 10,
      skip: 0,
    });
    console.log(`‚úÖ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${page1.length} —Å–ø–æ—Ä–æ–≤`);

    const totalCount = await prisma.dispute.count({
      where: { userId: testUser.id },
    });
    console.log(`‚úÖ –í—Å–µ–≥–æ —Å–ø–æ—Ä–æ–≤: ${totalCount}\n`);

    // 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    const testDocument = await prisma.document.create({
      data: {
        userId: testUser.id,
        disputeId: newDispute.id,
        title: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
        content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞...',
        documentType: 'CONTRACT',
        filePath: '/documents/test-contract.pdf',
        fileSize: 1024,
        mimeType: 'application/pdf',
        status: 'ACTIVE',
      },
    });
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${testDocument.title}`);
    console.log(`   üìÑ –¢–∏–ø: ${testDocument.documentType}`);
    console.log(`   üìÅ –†–∞–∑–º–µ—Ä: ${testDocument.fileSize} –±–∞–π—Ç\n`);

    // 10. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    console.log('10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ä–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏...');
    const disputeWithDocs = await prisma.dispute.findUnique({
      where: { id: newDispute.id },
      include: {
        documents: true,
      },
    });

    if (disputeWithDocs) {
      console.log(`‚úÖ –°–ø–æ—Ä —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: ${disputeWithDocs.title}`);
      console.log(`   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${disputeWithDocs.documents.length}`);
      disputeWithDocs.documents.forEach((doc, index) => {
        console.log(`      ${index + 1}. ${doc.title} (${doc.documentType})`);
      });
    }
    console.log('');

    // 11. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('11. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.document.deleteMany({
      where: { disputeId: newDispute.id },
    });
    await prisma.timelineEvent.deleteMany({
      where: { disputeId: newDispute.id },
    });
    await prisma.dispute.delete({
      where: { id: newDispute.id },
    });
    await prisma.user.delete({
      where: { id: testUser.id },
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã API –¥–ª—è —Å–ø–æ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ API endpoints –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã');
    console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDisputesAPI().catch((error) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
