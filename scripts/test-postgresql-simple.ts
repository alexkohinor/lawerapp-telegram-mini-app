/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
 */

import { PrismaClient } from '@prisma/client';

async function testPostgreSQLConnection() {
  console.log('üêò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ö–µ–º—É PostgreSQL
    const prisma = new PrismaClient();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ PostgreSQL:');
    (tables as any[]).forEach((table: any) => {
      console.log(`  - ${table.table_name}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const userCount = await prisma.user.count();
    console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL:', userCount);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: BigInt('9999999999'),
        telegramUsername: 'test_connection',
        firstName: 'Test',
        lastName: 'Connection',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ PostgreSQL:', testUser.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const consultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å PostgreSQL',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç PostgreSQL',
        status: 'completed',
        legalArea: 'civil-law',
        priority: 'medium',
        source: 'manual'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ PostgreSQL:', consultation.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const userWithRelations = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        consultations: true
      }
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω:', {
      consultations: userWithRelations?.consultations.length
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.consultation.delete({ where: { id: consultation.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏–∑ PostgreSQL');
    
    await prisma.$disconnect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('ECONNREFUSED')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL: brew services start postgresql');
      } else if (error.message.includes('ENOTFOUND')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç PostgreSQL');
      } else if (error.message.includes('authentication failed')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PostgreSQL');
      } else if (error.message.includes('database') && error.message.includes('does not exist')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log('   –°–æ–∑–¥–∞–π—Ç–µ –ë–î: createdb lawerapp');
      } else if (error.message.includes('relation') && error.message.includes('does not exist')) {
        console.log('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¢–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
        console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx prisma migrate deploy');
      }
    }
    
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PostgreSQL\n');
  
  try {
    const result = await testPostgreSQLConnection();
    
    if (result) {
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
      console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
      console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: createdb lawerapp');
      console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma migrate deploy');
    }
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
