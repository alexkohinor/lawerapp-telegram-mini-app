/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
 */

import { PrismaClient } from '@prisma/client';

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ö–µ–º—É SQLite –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'file:./test.db'
    }
  }
});

const testTelegramId = BigInt('1234567890');

async function testDataOverviewAPI() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/data/overview...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId,
        telegramUsername: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç',
        status: 'completed'
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await prisma.document.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        status: 'uploaded'
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä
    await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞',
        status: 'open'
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await prisma.payment.create({
      data: {
        userId: testUser.id,
        amount: 1000,
        currency: 'RUB',
        paymentMethod: 'yookassa',
        status: 'completed',
        subscriptionPlan: 'premium'
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await prisma.notification.create({
      data: {
        userId: testUser.id,
        type: 'info',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        isRead: false
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞
    const overview = {
      users: {
        total: await prisma.user.count(),
        active: await prisma.user.count({ where: { isActive: true } }),
        newToday: await prisma.user.count({
          where: {
            createdAt: {
              gte: new Date(new Date().setHours(0, 0, 0, 0))
            }
          }
        })
      },
      consultations: {
        total: await prisma.consultation.count(),
        completed: await prisma.consultation.count({ where: { status: 'completed' } }),
        pending: await prisma.consultation.count({ where: { status: 'pending' } })
      },
      documents: {
        total: await prisma.document.count(),
        uploaded: await prisma.document.count({ where: { status: 'uploaded' } }),
        processed: await prisma.document.count({ where: { status: 'processed' } })
      },
      disputes: {
        total: await prisma.dispute.count(),
        open: await prisma.dispute.count({ where: { status: 'open' } }),
        closed: await prisma.dispute.count({ where: { status: 'closed' } })
      },
      payments: {
        total: await prisma.payment.count(),
        completed: await prisma.payment.count({ where: { status: 'completed' } }),
        pending: await prisma.payment.count({ where: { status: 'pending' } }),
        totalAmount: await prisma.payment.aggregate({
          where: { status: 'completed' },
          _sum: { amount: true }
        })
      },
      notifications: {
        total: await prisma.notification.count(),
        unread: await prisma.notification.count({ where: { isRead: false } }),
        read: await prisma.notification.count({ where: { isRead: true } })
      }
    };
    
    console.log('‚úÖ –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω:', {
      users: overview.users.total,
      consultations: overview.consultations.total,
      documents: overview.documents.total,
      disputes: overview.disputes.total,
      payments: overview.payments.total,
      notifications: overview.notifications.total
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.notification.deleteMany({ where: { userId: testUser.id } });
    await prisma.payment.deleteMany({ where: { userId: testUser.id } });
    await prisma.dispute.deleteMany({ where: { userId: testUser.id } });
    await prisma.document.deleteMany({ where: { userId: testUser.id } });
    await prisma.consultation.deleteMany({ where: { userId: testUser.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    
    return overview;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/data/overview:', error);
    throw error;
  }
}

async function testAnalyticsAPI() {
  console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/data/analytics...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId + BigInt(1),
        telegramUsername: 'testuser2',
        firstName: 'Test2',
        lastName: 'User2',
        subscriptionPlan: 'premium',
        isActive: true,
        documentsUsed: 5
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
    const today = new Date();
    const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
    const twoDaysAgo = new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000);
    
    await prisma.consultation.createMany({
      data: [
        {
          userId: testUser.id,
          question: '–í–æ–ø—Ä–æ—Å 1',
          answer: '–û—Ç–≤–µ—Ç 1',
          status: 'completed',
          createdAt: today
        },
        {
          userId: testUser.id,
          question: '–í–æ–ø—Ä–æ—Å 2',
          answer: '–û—Ç–≤–µ—Ç 2',
          status: 'completed',
          createdAt: yesterday
        },
        {
          userId: testUser.id,
          question: '–í–æ–ø—Ä–æ—Å 3',
          answer: '–û—Ç–≤–µ—Ç 3',
          status: 'pending',
          createdAt: twoDaysAgo
        }
      ]
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    await prisma.payment.createMany({
      data: [
        {
          userId: testUser.id,
          amount: 1000,
          currency: 'RUB',
          paymentMethod: 'yookassa',
          status: 'completed',
          subscriptionPlan: 'premium',
          createdAt: today
        },
        {
          userId: testUser.id,
          amount: 500,
          currency: 'RUB',
          paymentMethod: 'yoomoney',
          status: 'completed',
          subscriptionPlan: 'basic',
          createdAt: yesterday
        }
      ]
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userAnalytics = {
      totalUsers: await prisma.user.count(),
      activeUsers: await prisma.user.count({ where: { isActive: true } }),
      newUsersToday: await prisma.user.count({
        where: {
          createdAt: {
            gte: new Date(today.setHours(0, 0, 0, 0))
          }
        }
      }),
      subscriptionPlans: await prisma.user.groupBy({
        by: ['subscriptionPlan'],
        _count: { subscriptionPlan: true }
      })
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const businessAnalytics = {
      revenue: {
        total: await prisma.payment.aggregate({
          where: { status: 'completed' },
          _sum: { amount: true }
        }),
        today: await prisma.payment.aggregate({
          where: {
            status: 'completed',
            createdAt: {
              gte: new Date(today.setHours(0, 0, 0, 0))
            }
          },
          _sum: { amount: true }
        })
      },
      consultations: {
        total: await prisma.consultation.count(),
        completed: await prisma.consultation.count({ where: { status: 'completed' } }),
        byDay: await prisma.consultation.groupBy({
          by: ['createdAt'],
          _count: { id: true },
          where: {
            createdAt: {
              gte: new Date(twoDaysAgo.setHours(0, 0, 0, 0))
            }
          }
        })
      }
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const systemAnalytics = {
      performance: {
        uptime: 99.9,
        responseTime: 150,
        errorRate: 0.1
      },
      storage: {
        totalDocuments: await prisma.document.count(),
        totalSize: await prisma.document.aggregate({
          _sum: { fileSize: true }
        })
      }
    };
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–∞:', userAnalytics.totalUsers, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('‚úÖ –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', businessAnalytics.revenue.total._sum.amount, '—Ä—É–±–ª–µ–π');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', systemAnalytics.performance.uptime, '% uptime');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.payment.deleteMany({ where: { userId: testUser.id } });
    await prisma.consultation.deleteMany({ where: { userId: testUser.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    
    return { userAnalytics, businessAnalytics, systemAnalytics };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/data/analytics:', error);
    throw error;
  }
}

async function testSearchAPI() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/data/search...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId + BigInt(2),
        telegramUsername: 'testuser3',
        firstName: 'Test3',
        lastName: 'User3',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
    await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–í–æ–ø—Ä–æ—Å –æ –¥–æ–≥–æ–≤–æ—Ä–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
        answer: '–û—Ç–≤–µ—Ç –æ –¥–æ–≥–æ–≤–æ—Ä–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
        status: 'completed'
      }
    });
    
    await prisma.document.create({
      data: {
        userId: testUser.id,
        title: '–î–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        status: 'uploaded'
      }
    });
    
    await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–°–ø–æ—Ä –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É',
        status: 'ACTIVE'
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º
    const consultationResults = await prisma.consultation.findMany({
      where: {
        OR: [
          { question: { contains: '–¥–æ–≥–æ–≤–æ—Ä' } },
          { answer: { contains: '–¥–æ–≥–æ–≤–æ—Ä' } }
        ]
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    const documentResults = await prisma.document.findMany({
      where: {
        OR: [
          { title: { contains: '–¥–æ–≥–æ–≤–æ—Ä' } }
        ]
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–ø–æ—Ä–∞–º
    const disputeResults = await prisma.dispute.findMany({
      where: {
        OR: [
          { title: { contains: '–¥–æ–≥–æ–≤–æ—Ä' } },
          { description: { contains: '–¥–æ–≥–æ–≤–æ—Ä' } }
        ]
      }
    });
    
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º:', consultationResults.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:', documentResults.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Å–ø–æ—Ä–∞–º:', disputeResults.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.dispute.deleteMany({ where: { userId: testUser.id } });
    await prisma.document.deleteMany({ where: { userId: testUser.id } });
    await prisma.consultation.deleteMany({ where: { userId: testUser.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    
    return {
      consultations: consultationResults.length,
      documents: documentResults.length,
      disputes: disputeResults.length
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/data/search:', error);
    throw error;
  }
}

async function testCleanupAPI() {
  console.log('\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/data/cleanup...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId + BigInt(3),
        telegramUsername: 'testuser4',
        firstName: 'Test4',
        lastName: 'User4',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    const oldDate = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000); // 90 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    
    await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–°—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å',
        answer: '–°—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç',
        status: 'completed',
        createdAt: oldDate
      }
    });
    
    await prisma.notification.create({
      data: {
        userId: testUser.id,
        type: 'info',
        title: '–°—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: '–°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        isRead: true,
        createdAt: oldDate
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const deletedNotifications = await prisma.notification.deleteMany({
      where: {
        isRead: true,
        createdAt: {
          lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        }
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    const deletedSessions = await prisma.session.deleteMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', deletedNotifications.count, '—É–¥–∞–ª–µ–Ω–æ');
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π:', deletedSessions.count, '—É–¥–∞–ª–µ–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.consultation.deleteMany({ where: { userId: testUser.id } });
    await prisma.notification.deleteMany({ where: { userId: testUser.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    
    return {
      deletedNotifications: deletedNotifications.count,
      deletedSessions: deletedSessions.count
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API /api/data/cleanup:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ–±–∑–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    await testDataOverviewAPI();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await testAnalyticsAPI();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø–æ–∏—Å–∫–∞
    await testSearchAPI();
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ—á–∏—Å—Ç–∫–∏
    await testCleanupAPI();
    
    console.log('\nüéâ –í—Å–µ API endpoints –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:');
    console.log('‚úÖ /api/data/overview - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ /api/data/analytics - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ /api/data/search - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ /api/data/cleanup - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
