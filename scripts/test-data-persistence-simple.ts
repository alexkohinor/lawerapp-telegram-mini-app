/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Data Persistence Layer —Å SQLite
 */

import { PrismaClient } from '@prisma/client';

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ö–µ–º—É SQLite –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'file:./test.db'
    }
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testTelegramId = BigInt('1234567890');

async function testBasicOperations() {
  console.log('üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId,
        telegramUsername: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const testConsultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤—É',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å',
        legalArea: 'civil-law',
        status: 'completed'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testConsultation.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const testDocument = await prisma.document.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
        fileSize: 1024000,
        mimeType: 'application/pdf',
        status: 'uploaded'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', testDocument.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä
    const testDispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞',
        status: 'ACTIVE'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–æ—Ä —Å–æ–∑–¥–∞–Ω:', testDispute.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    const testPayment = await prisma.payment.create({
      data: {
        userId: testUser.id,
        amount: 1000,
        currency: 'RUB',
        paymentMethod: 'yookassa',
        status: 'completed',
        subscriptionPlan: 'premium'
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', testPayment.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const testNotification = await prisma.notification.create({
      data: {
        userId: testUser.id,
        type: 'info',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        isRead: false
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', testNotification.id);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const testSession = await prisma.session.create({
      data: {
        userId: testUser.id,
        sessionToken: 'test-session-token',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000)
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testSession.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        consultations: true,
        documents: true,
        disputes: true,
        payments: true,
        notifications: true,
        sessions: true
      }
    });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–µ–Ω:', {
      consultations: user?.consultations.length,
      documents: user?.documents.length,
      disputes: user?.disputes.length,
      payments: user?.payments.length,
      notifications: user?.notifications.length,
      sessions: user?.sessions.length
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedConsultation = await prisma.consultation.update({
      where: { id: testConsultation.id },
      data: { status: 'completed', answer: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç' }
    });
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedConsultation.status);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    const consultations = await prisma.consultation.findMany({
      where: {
        question: { contains: '—Ç–µ—Å—Ç–æ–≤—ã–π' }
      }
    });
    console.log('‚úÖ –ü–æ–∏—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω:', consultations.length);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      users: await prisma.user.count(),
      consultations: await prisma.consultation.count(),
      documents: await prisma.document.count(),
      disputes: await prisma.dispute.count(),
      payments: await prisma.payment.count(),
      notifications: await prisma.notification.count(),
      sessions: await prisma.session.count()
    };
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.notification.delete({ where: { id: testNotification.id } });
    await prisma.session.delete({ where: { id: testSession.id } });
    await prisma.payment.delete({ where: { id: testPayment.id } });
    await prisma.dispute.delete({ where: { id: testDispute.id } });
    await prisma.document.delete({ where: { id: testDocument.id } });
    await prisma.consultation.delete({ where: { id: testConsultation.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}

async function testRAGModels() {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –º–æ–¥–µ–ª–µ–π...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId + BigInt(1),
        telegramUsername: 'testuser2',
        firstName: 'Test2',
        lastName: 'User2',
        subscriptionPlan: 'free',
        isActive: true,
        documentsUsed: 0
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è RAG —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –°–æ–∑–¥–∞–µ–º RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const ragConsultation = await prisma.rAGConsultation.create({
      data: {
        userId: testUser.id,
        question: '–¢–µ—Å—Ç–æ–≤—ã–π RAG –≤–æ–ø—Ä–æ—Å',
        answer: '–¢–µ—Å—Ç–æ–≤—ã–π RAG –æ—Ç–≤–µ—Ç',
        legalArea: 'civil-law',
        sources: { documents: ['doc1', 'doc2'], laws: ['law1'] },
        confidence: 0.95,
        tokensUsed: 1500,
        costUsd: 0.05,
        responseTimeMs: 2000,
        status: 'completed'
      }
    });
    console.log('‚úÖ RAG –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', ragConsultation.id);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const processedDocument = await prisma.processedDocument.create({
      data: {
        userId: testUser.id,
        originalName: 'test-rag-document.pdf',
        s3Key: 'documents/test-rag-document.pdf',
        fileSize: 2048000,
        mimeType: 'application/pdf',
        chunksCount: 10,
        legalArea: 'civil-law',
        documentType: 'contract',
        processingStatus: 'completed',
        vectorDbIds: ['vec1', 'vec2', 'vec3']
      }
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', processedDocument.id);
    
    // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const documentChunk = await prisma.documentChunk.create({
      data: {
        documentId: processedDocument.id,
        chunkIndex: 0,
        content: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–∞–Ω–∫–∞',
        startPosition: 0,
        endPosition: 100,
        vectorId: 'vec1',
        embedding: [0.1, 0.2, 0.3, 0.4, 0.5]
      }
    });
    console.log('‚úÖ –ß–∞–Ω–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω:', documentChunk.id);
    
    // –°–æ–∑–¥–∞–µ–º RAG –∑–∞–ø—Ä–æ—Å
    const ragQuery = await prisma.rAGQuery.create({
      data: {
        userId: testUser.id,
        query: '–¢–µ—Å—Ç–æ–≤—ã–π RAG –∑–∞–ø—Ä–æ—Å',
        legalArea: 'civil-law',
        results: { documents: ['doc1'], laws: ['law1'] }
      }
    });
    console.log('‚úÖ RAG –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω:', ragQuery.id);
    
    // –°–æ–∑–¥–∞–µ–º AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    const aiMonitoring = await prisma.aiMonitoring.create({
      data: {
        ragConsultationId: ragConsultation.id,
        model: 'gpt-4',
        tokensInput: 1000,
        tokensOutput: 500,
        responseTimeMs: 2000,
        costUsd: 0.05
      }
    });
    console.log('‚úÖ AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω:', aiMonitoring.id);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ RAG –¥–∞–Ω–Ω—ã—Ö
    const ragData = await prisma.user.findUnique({
      where: { id: testUser.id },
      include: {
        ragConsultations: true,
        processedDocuments: {
          include: { chunks: true }
        },
        ragQueries: true
      }
    });
    console.log('‚úÖ RAG –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', {
      ragConsultations: ragData?.ragConsultations.length,
      processedDocuments: ragData?.processedDocuments.length,
      ragQueries: ragData?.ragQueries.length,
      chunks: ragData?.processedDocuments[0]?.chunks.length
    });
    
    // –û—á–∏—â–∞–µ–º RAG —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await prisma.aiMonitoring.delete({ where: { id: aiMonitoring.id } });
    await prisma.documentChunk.delete({ where: { id: documentChunk.id } });
    await prisma.rAGQuery.delete({ where: { id: ragQuery.id } });
    await prisma.processedDocument.delete({ where: { id: processedDocument.id } });
    await prisma.rAGConsultation.delete({ where: { id: ragConsultation.id } });
    await prisma.user.delete({ where: { id: testUser.id } });
    console.log('‚úÖ RAG —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ RAG –º–æ–¥–µ–ª–µ–π:', error);
    throw error;
  }
}

async function testRelations() {
  console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.user.create({
      data: {
        telegramId: testTelegramId + BigInt(2),
        telegramUsername: 'testuser3',
        firstName: 'Test3',
        lastName: 'User3',
        subscriptionPlan: 'premium',
        isActive: true,
        documentsUsed: 5
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–≤—è–∑–µ–π —Å–æ–∑–¥–∞–Ω:', testUser.id);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    const consultation = await prisma.consultation.create({
      data: {
        userId: testUser.id,
        question: '–í–æ–ø—Ä–æ—Å —Å AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º',
        answer: '–û—Ç–≤–µ—Ç —Å AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º',
        status: 'completed'
      }
    });
    
    const aiMonitoring = await prisma.aiMonitoring.create({
      data: {
        consultationId: consultation.id,
        model: 'gpt-4',
        tokensInput: 2000,
        tokensOutput: 1000,
        responseTimeMs: 3000,
        costUsd: 0.1
      }
    });
    console.log('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å AI –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä —Å timeline —Å–æ–±—ã—Ç–∏—è–º–∏
    const dispute = await prisma.dispute.create({
      data: {
        userId: testUser.id,
        title: '–°–ø–æ—Ä —Å timeline',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞ —Å timeline',
        status: 'open'
      }
    });
    
    const timelineEvent = await prisma.timelineEvent.create({
      data: {
        disputeId: dispute.id,
        type: 'CREATED',
        description: '–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω',
        userId: testUser.id
      }
    });
    console.log('‚úÖ –°–ø–æ—Ä —Å timeline —Å–æ–±—ã—Ç–∏–µ–º —Å–æ–∑–¥–∞–Ω');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    await prisma.user.delete({ where: { id: testUser.id } });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
    const deletedConsultation = await prisma.consultation.findUnique({
      where: { id: consultation.id }
    });
    const deletedDispute = await prisma.dispute.findUnique({
      where: { id: dispute.id }
    });
    const deletedTimeline = await prisma.timelineEvent.findUnique({
      where: { id: timelineEvent.id }
    });
    const deletedAiMonitoring = await prisma.aiMonitoring.findUnique({
      where: { id: aiMonitoring.id }
    });
    
    console.log('‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', {
      consultation: deletedConsultation === null,
      dispute: deletedDispute === null,
      timeline: deletedTimeline === null,
      aiMonitoring: deletedAiMonitoring === null
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π:', error);
    throw error;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Data Persistence Layer —Å SQLite\n');
  
  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await testBasicOperations();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –º–æ–¥–µ–ª–∏
    await testRAGModels();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
    await testRelations();
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Data Persistence Layer –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ RAG –º–æ–¥–µ–ª–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –°–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ - —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
  } catch (error) {
    console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await prisma.$disconnect();
    console.log('\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(console.error);
