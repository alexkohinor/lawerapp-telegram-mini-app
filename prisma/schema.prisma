// Prisma schema для LawerApp
// Использует PostgreSQL из advokat-fomin.ru

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  telegramId            BigInt    @unique @map("telegram_id")
  telegramUsername      String?   @map("telegram_username")
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  phone                 String?
  email                 String?
  subscriptionPlan      String    @default("free") @map("subscription_plan")
  subscriptionExpiresAt DateTime? @map("subscription_expires_at")
  isActive              Boolean   @default(true) @map("is_active")
  documentsUsed         Int       @default(0) @map("documents_used") // Счетчик использованных документов
  lastLoginAt           DateTime? @map("last_login_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  // Relations
  consultations         Consultation[]
  disputes              Dispute[]
  documents             Document[]
  payments              Payment[]
  notifications         Notification[]
  sessions              Session[]
  accounts              Account[]
  
  // RAG Relations
  ragConsultations      RAGConsultation[]
  processedDocuments    ProcessedDocument[]
  ragQueries           RAGQuery[]
  
  // Tax Dispute Relations
  taxDisputes          TaxDispute[]

  @@map("lawerapp_users")
}

model Consultation {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  question    String
  answer      String?
  legalArea   String?     @map("legal_area")
  status      String      @default("pending")
  tokensUsed  Int         @default(0) @map("tokens_used")
  createdAt   DateTime    @default(now()) @map("created_at")
  completedAt DateTime?   @map("completed_at")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiMonitoring AiMonitoring[]

  @@map("lawerapp_consultations")
}

model Dispute {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  title           String
  description     String?
  type            String    @default("OTHER") // CONSUMER, LABOR, PROPERTY, OTHER
  status          String    @default("ACTIVE") // ACTIVE, PENDING, RESOLVED, CLOSED
  priority        String    @default("MEDIUM") // HIGH, MEDIUM, LOW
  amount          Decimal?  // Changed from estimatedValue to amount
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  resolvedAt      DateTime? @map("resolved_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents       Document[]
  timeline        TimelineEvent[]

  @@map("lawerapp_disputes")
}

model Document {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  disputeId   String?   @map("dispute_id")
  title       String
  content     String?
  documentType String?  @map("document_type")
  filePath    String?   @map("file_path")
  fileSize    Int?      @map("file_size")
  mimeType    String?   @map("mime_type")
  status      String    @default("draft")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dispute     Dispute?  @relation(fields: [disputeId], references: [id], onDelete: SetNull)

  @@map("lawerapp_documents")
}

model Payment {
  id                  String    @id @default(uuid())
  userId              String    @map("user_id")
  amount              Float   
  currency            String    @default("RUB")
  paymentMethod       String?   @map("payment_method")
  paymentProviderId   String?   @map("payment_provider_id")
  status              String    @default("pending")
  subscriptionPlan    String?   @map("subscription_plan")
  subscriptionPeriod  Int?      @map("subscription_period")
  metadata            Json?
  createdAt           DateTime  @default(now()) @map("created_at")
  completedAt         DateTime? @map("completed_at")

  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lawerapp_payments")
}

model Notification {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  type          String
  title         String
  message       String
  isRead        Boolean   @default(false) @map("is_read")
  telegramSent  Boolean   @default(false) @map("telegram_sent")
  createdAt     DateTime  @default(now()) @map("created_at")
  readAt        DateTime? @map("read_at")

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lawerapp_notifications")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("lawerapp_sessions")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  accountId         String   @map("account_id")
  provider          String
  providerAccountId String   @map("provider_account_id")
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("lawerapp_accounts")
}

model AiMonitoring {
  id                String          @id @default(uuid())
  consultationId    String?         @map("consultation_id")
  ragConsultationId String?         @map("rag_consultation_id")
  model             String?         // gpt-4, claude-3, etc.
  tokensInput       Int?            @map("tokens_input")
  tokensOutput      Int?            @map("tokens_output")
  responseTimeMs    Int?            @map("response_time_ms")
  costUsd           Float?          @map("cost_usd") 
  errorMessage      String?         @map("error_message")
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  consultation      Consultation?   @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  ragConsultation   RAGConsultation? @relation(fields: [ragConsultationId], references: [id], onDelete: Cascade)

  @@map("lawerapp_ai_monitoring")
}

model TimelineEvent {
  id          String   @id @default(uuid())
  disputeId   String   @map("dispute_id")
  type        String   // CREATED, UPDATED, DOCUMENT_ADDED, STATUS_CHANGED
  description String
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  dispute     Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade)

  @@map("lawerapp_timeline_events")
}

// RAG System Models

model RAGConsultation {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  question        String
  answer          String?
  legalArea       String?   @map("legal_area")
  sources         Json?     // RAG источники как JSON
  confidence      Float?    // Уверенность ответа (0-1)
  tokensUsed      Int       @default(0) @map("tokens_used")
  costUsd         Float?    @map("cost_usd")
  responseTimeMs  Int?      @map("response_time_ms")
  status          String    @default("pending")
  createdAt       DateTime  @default(now()) @map("created_at")
  completedAt     DateTime? @map("completed_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiMonitoring    AiMonitoring[]

  @@map("rag_consultations")
}

model ProcessedDocument {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  originalName      String    @map("original_name")
  s3Key             String    @map("s3_key")
  fileSize          Int       @map("file_size")
  mimeType          String    @map("mime_type")
  chunksCount       Int       @map("chunks_count")
  legalArea         String?   @map("legal_area")
  documentType      String?   @map("document_type")
  processingStatus  String    @default("pending") @map("processing_status")
  vectorDbIds       String[]  @map("vector_db_ids") // Массив ID чанков в векторной БД
  errorMessage      String?   @map("error_message")
  createdAt         DateTime  @default(now()) @map("created_at")
  processedAt       DateTime? @map("processed_at")

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks            DocumentChunk[]

  @@map("processed_documents")
}

model RAGQuery {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  query           String
  legalArea       String?   @map("legal_area")
  maxResults      Int       @default(5) @map("max_results")
  threshold       Float     @default(0.7)
  results         Json?     // Результаты поиска как JSON
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rag_queries")
}

model DocumentChunk {
  id              String    @id @default(uuid())
  documentId      String    @map("document_id")
  chunkIndex      Int       @map("chunk_index")
  content         String
  startPosition   Int       @map("start_position")
  endPosition     Int       @map("end_position")
  vectorId        String?   @map("vector_id") // ID в векторной БД
  embedding       Json?     // Эмбеддинг (для локального хранения)
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  document        ProcessedDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

// ============================================
// Tax Dispute Models (Phase 9)
// ============================================

model TaxDispute {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  taxType         String    @map("tax_type") // NDFL, transport, property, land, NPD
  amount          Decimal   @db.Decimal(12, 2)
  penaltyAmount   Decimal?  @default(0) @map("penalty_amount") @db.Decimal(12, 2)
  fineAmount      Decimal?  @default(0) @map("fine_amount") @db.Decimal(12, 2)
  totalAmount     Decimal?  @map("total_amount") @db.Decimal(12, 2) // amount + penalty + fine
  period          String    // Налоговый период, например "2023"
  status          String    @default("active") // active, pending_response, resolved, rejected, closed
  
  // Основания для оспаривания
  grounds         Json?     // Массив оснований: ["already_paid", "incorrect_calculation", "expired", etc.]
  
  // AI-анализ
  successRate     Float?    @map("success_rate") // Шансы на успех (0-100%)
  aiAnalysis      Json?     @map("ai_analysis") // Результаты AI-анализа
  
  // Сроки
  requirementDate DateTime? @map("requirement_date") // Дата налогового требования
  deadline        DateTime? // Крайний срок для подачи возражения
  
  // Данные налогоплательщика
  taxpayerINN     String?   @map("taxpayer_inn")
  taxpayerAddress String?   @map("taxpayer_address")
  taxpayerPhone   String?   @map("taxpayer_phone")
  
  // ИФНС
  inspectionNumber String?  @map("inspection_number") // Номер ИФНС
  inspectionName   String?  @map("inspection_name") // Название ИФНС
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  resolvedAt      DateTime? @map("resolved_at")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents       TaxDisputeDocument[]
  timeline        TaxDisputeTimeline[]
  calculations    TaxCalculation[]
  
  @@index([userId])
  @@index([status])
  @@index([taxType])
  @@map("tax_disputes")
}

model TaxDisputeDocument {
  id              String    @id @default(uuid())
  disputeId       String    @map("dispute_id")
  type            String    // objection, complaint, notice, recalculation_request
  title           String
  content         String    @db.Text // Содержимое документа
  
  // Шаблон и метаданные
  templateId      String?   @map("template_id")
  variables       Json?     // Переменные для шаблона
  
  // Правовое обоснование
  legalBasis      Json?     @map("legal_basis") // Массив ссылок на статьи НК РФ
  
  // Статус документа
  status          String    @default("draft") // draft, generated, sent, delivered, rejected
  
  // Файлы
  s3Key           String?   @map("s3_key") // Ключ в S3 для PDF/DOCX
  fileUrl         String?   @map("file_url") // URL для скачивания
  
  // Отправка
  sentAt          DateTime? @map("sent_at")
  deliveredAt     DateTime? @map("delivered_at")
  sentMethod      String?   @map("sent_method") // electronic, mail, personal
  trackingNumber  String?   @map("tracking_number") // Трек-номер почты
  
  // Timestamps
  generatedAt     DateTime  @default(now()) @map("generated_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  dispute         TaxDispute @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  @@index([disputeId])
  @@index([type])
  @@index([status])
  @@map("tax_dispute_documents")
}

model TaxDisputeTimeline {
  id              String    @id @default(uuid())
  disputeId       String    @map("dispute_id")
  eventType       String    @map("event_type") // created, document_generated, document_sent, status_changed, response_received
  description     String
  metadata        Json?     // Дополнительные данные события
  eventDate       DateTime  @default(now()) @map("event_date")
  
  // Relations
  dispute         TaxDispute @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  
  @@index([disputeId])
  @@index([eventType])
  @@map("tax_dispute_timeline")
}

model TaxCalculation {
  id              String    @id @default(uuid())
  disputeId       String?   @map("dispute_id")
  userId          String    @map("user_id")
  
  // Тип налога
  taxType         String    @map("tax_type") // transport, property, land, NDFL, NPD
  
  // Параметры расчета (зависят от типа налога)
  parameters      Json      // Гибкое хранение параметров для разных налогов
  
  // Результаты расчета
  calculatedAmount Decimal  @map("calculated_amount") @db.Decimal(12, 2)
  rate            Decimal?  @db.Decimal(10, 4) // Ставка налога
  
  // Сравнение с начислением налоговой
  claimedAmount   Decimal?  @map("claimed_amount") @db.Decimal(12, 2) // Сумма от налоговой
  difference      Decimal?  @db.Decimal(12, 2) // Разница
  
  // Метаданные
  region          String?   // Регион РФ
  period          String?   // Налоговый период
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations (optional связь с TaxDispute)
  dispute         TaxDispute? @relation(fields: [disputeId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([taxType])
  @@map("tax_calculations")
}

model TransportTaxRate {
  id              String    @id @default(uuid())
  region          String    // Регион РФ
  regionCode      String?   @map("region_code") // Код региона (например, "77" для Москвы)
  vehicleType     String    @map("vehicle_type") // car, motorcycle, truck, bus
  powerMin        Int       @map("power_min") // Минимальная мощность (л.с.)
  powerMax        Int       @map("power_max") // Максимальная мощность (л.с.)
  rate            Decimal   @db.Decimal(10, 2) // Ставка (руб./л.с.)
  year            Int       // Год действия ставки
  
  // Метаданные
  source          String?   // Источник данных (закон субъекта РФ)
  isActive        Boolean   @default(true) @map("is_active")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  @@index([region, year])
  @@index([vehicleType])
  @@map("transport_tax_rates")
}

model TaxDocumentTemplate {
  id              String    @id @default(uuid())
  name            String
  type            String    // objection, complaint, notice, recalculation_request
  category        String?   // Категория (transport, property, land, NDFL, NPD)
  
  // Шаблон
  template        String    @db.Text // Handlebars/Mustache шаблон
  variables       Json      // Описание переменных шаблона
  
  // Метаданные
  description     String?
  legalBasis      Json?     @map("legal_basis") // Ссылки на статьи НК РФ по умолчанию
  
  // Статистика использования
  usageCount      Int       @default(0) @map("usage_count")
  successRate     Float?    @map("success_rate") // Процент успешных оспариваний
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  @@index([type])
  @@index([category])
  @@map("tax_document_templates")
}

// ============================================
// AI Prompts Models (для настраиваемых промптов)
// ============================================

model AIPromptTemplate {
  id              String    @id @default(uuid())
  name            String
  promptType      String    @map("prompt_type") // system, user, document_generation, analysis
  category        String?   // transport, property, land, NDFL, NPD, general
  
  // Промпт
  systemPrompt    String?   @db.Text @map("system_prompt") // Системный промпт
  userPrompt      String?   @db.Text @map("user_prompt") // Пользовательский промпт (шаблон)
  
  // Метаданные
  description     String?
  version         String    @default("1.0")
  
  // AI параметры
  temperature     Float     @default(0.3) // 0.0-2.0
  maxTokens       Int       @default(3000) @map("max_tokens")
  model           String    @default("gpt-4")
  
  // Статус и валидация
  isActive        Boolean   @default(true) @map("is_active")
  isDefault       Boolean   @default(false) @map("is_default") // Промпт по умолчанию
  
  // Статистика использования
  usageCount      Int       @default(0) @map("usage_count")
  successRate     Float?    @map("success_rate") // Процент успешных генераций
  avgResponseTime Int?      @map("avg_response_time") // Среднее время ответа (мс)
  
  // Feedback и обучение
  positiveVotes   Int       @default(0) @map("positive_votes")
  negativeVotes   Int       @default(0) @map("negative_votes")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  usageLogs       AIPromptUsageLog[]
  
  @@index([promptType])
  @@index([category])
  @@index([isActive])
  @@index([isDefault])
  @@map("ai_prompt_templates")
}

model AIPromptUsageLog {
  id              String    @id @default(uuid())
  promptId        String    @map("prompt_id")
  userId          String?   @map("user_id")
  disputeId       String?   @map("dispute_id")
  
  // Параметры запроса
  inputData       Json      @map("input_data") // Данные, переданные в промпт
  
  // Результат
  generatedContent String?  @db.Text @map("generated_content")
  responseTime    Int?      @map("response_time") // мс
  tokensUsed      Int?      @map("tokens_used")
  
  // Оценка качества
  wasSuccessful   Boolean?  @map("was_successful")
  userRating      Int?      @map("user_rating") // 1-5 звезд
  feedback        String?   @db.Text
  
  // Ошибки
  errorMessage    String?   @db.Text @map("error_message")
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  prompt          AIPromptTemplate @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@index([promptId])
  @@index([userId])
  @@index([disputeId])
  @@index([wasSuccessful])
  @@map("ai_prompt_usage_logs")
}

