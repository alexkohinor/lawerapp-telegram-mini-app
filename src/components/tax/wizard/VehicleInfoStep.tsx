'use client';

import React, { useState } from 'react';

interface VehicleInfoStepProps {
  data: {
    vehicleType?: string;
    enginePower?: number;
    vehicleBrand?: string;
    vehicleModel?: string;
    registrationNumber?: string;
  };
  onNext: (data: Partial<VehicleInfoStepProps['data']>) => void;
  onBack: () => void;
}

export function VehicleInfoStep({ data, onNext, onBack }: VehicleInfoStepProps) {
  const [vehicleType, setVehicleType] = useState(data.vehicleType || '');
  const [enginePower, setEnginePower] = useState(data.enginePower?.toString() || '');
  const [vehicleBrand, setVehicleBrand] = useState(data.vehicleBrand || '');
  const [vehicleModel, setVehicleModel] = useState(data.vehicleModel || '');
  const [registrationNumber, setRegistrationNumber] = useState(data.registrationNumber || '');

  const vehicleTypes = [
    { id: 'car', name: '–õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', icon: 'üöó' },
    { id: 'motorcycle', name: '–ú–æ—Ç–æ—Ü–∏–∫–ª', icon: 'üèçÔ∏è' },
    { id: 'truck', name: '–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', icon: 'üöö' },
    { id: 'bus', name: '–ê–≤—Ç–æ–±—É—Å', icon: 'üöå' },
  ];

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onNext({
      vehicleType,
      enginePower: Number(enginePower),
      vehicleBrand,
      vehicleModel,
      registrationNumber,
    });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <h2 className="text-xl font-bold text-[var(--tg-theme-text-color,#000000)] mb-2">
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ
        </h2>
        <p className="text-sm text-[var(--tg-theme-hint-color,#999999)] mb-4">
          –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –¢–° –∏–∑ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        </p>
      </div>

      {/* Vehicle Type */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
          –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
        </label>
        <div className="grid grid-cols-2 gap-3">
          {vehicleTypes.map((type) => (
            <button
              key={type.id}
              type="button"
              onClick={() => setVehicleType(type.id)}
              className={`p-4 rounded-lg border-2 text-center transition-all ${
                vehicleType === type.id
                  ? 'border-[var(--tg-theme-button-color,#2563eb)] bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <span className="text-3xl block mb-2">{type.icon}</span>
              <span className="text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
                {type.name}
              </span>
            </button>
          ))}
        </div>
      </div>

      {/* Engine Power */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
          –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å.)
        </label>
        <div className="relative">
          <input
            type="number"
            value={enginePower}
            onChange={(e) => setEnginePower(e.target.value)}
            min="1"
            max="9999"
            className="w-full p-3 pr-12 border border-gray-300 rounded-lg bg-white text-[var(--tg-theme-text-color,#000000)]"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 150"
            required
          />
          <span className="absolute right-3 top-3 text-[var(--tg-theme-hint-color,#999999)]">
            –ª.—Å.
          </span>
        </div>
        <p className="text-xs text-[var(--tg-theme-hint-color,#999999)]">
          üí° –£–∫–∞–∑–∞–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ 4 —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¢–°
        </p>
      </div>

      {/* Vehicle Brand */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
          –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        </label>
        <input
          type="text"
          value={vehicleBrand}
          onChange={(e) => setVehicleBrand(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white text-[var(--tg-theme-text-color,#000000)]"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Toyota"
          required
        />
      </div>

      {/* Vehicle Model */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
          –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        </label>
        <input
          type="text"
          value={vehicleModel}
          onChange={(e) => setVehicleModel(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white text-[var(--tg-theme-text-color,#000000)]"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Camry"
          required
        />
      </div>

      {/* Registration Number */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-[var(--tg-theme-text-color,#000000)]">
          –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        </label>
        <input
          type="text"
          value={registrationNumber}
          onChange={(e) => setRegistrationNumber(e.target.value.toUpperCase())}
          className="w-full p-3 border border-gray-300 rounded-lg bg-white text-[var(--tg-theme-text-color,#000000)] uppercase"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í777"
          required
        />
      </div>

      {/* Navigation Buttons */}
      <div className="flex gap-3">
        <button
          type="button"
          onClick={onBack}
          className="flex-1 py-4 border-2 border-gray-300 text-[var(--tg-theme-text-color,#000000)] rounded-lg font-semibold hover:bg-gray-50 transition-all"
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <button
          type="submit"
          disabled={!vehicleType || !enginePower}
          className="flex-1 py-4 bg-[var(--tg-theme-button-color,#2563eb)] text-[var(--tg-theme-button-text-color,#ffffff)] rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:opacity-90 transition-all"
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí
        </button>
      </div>
    </form>
  );
}

