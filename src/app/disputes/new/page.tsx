'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { HapticFeedback } from '@/components/telegram/HapticFeedback';
import { BackButton } from '@/components/telegram/BackButton';
import { useTelegramUser } from '@/hooks/useTelegramUser';

const DISPUTE_TYPES = [
  {
    id: 'civil',
    name: '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Å–ø–æ—Ä',
    icon: 'üè†',
    description: '–°–ø–æ—Ä—ã –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∏–º—É—â–µ—Å—Ç–≤—É',
    category: '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ',
    fields: [
      { name: 'contract_type', label: '–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞', type: 'select', options: ['–ö—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞', '–ê—Ä–µ–Ω–¥–∞', '–ü–æ–¥—Ä—è–¥', '–£—Å–ª—É–≥–∏', '–î—Ä—É–≥–æ–µ'], required: true },
      { name: 'dispute_subject', label: '–ü—Ä–µ–¥–º–µ—Ç —Å–ø–æ—Ä–∞', type: 'text', required: true },
      { name: 'amount', label: '–°—É–º–º–∞ —Å–ø–æ—Ä–∞', type: 'number', required: false },
      { name: 'contract_date', label: '–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞', type: 'date', required: false },
    ]
  },
  {
    id: 'labor',
    name: '–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä',
    icon: 'üë∑',
    description: '–°–ø–æ—Ä—ã —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –∑–∞—Ä–ø–ª–∞—Ç–∞',
    category: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
    fields: [
      { name: 'employer_name', label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è', type: 'text', required: true },
      { name: 'position', label: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', type: 'text', required: true },
      { name: 'dispute_type', label: '–¢–∏–ø —Å–ø–æ—Ä–∞', type: 'select', options: ['–ù–µ–≤—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã', '–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ', '–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞', '–î—Ä—É–≥–æ–µ'], required: true },
      { name: 'employment_date', label: '–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', type: 'date', required: false },
    ]
  },
  {
    id: 'consumer',
    name: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π',
    icon: 'üõí',
    description: '–°–ø–æ—Ä—ã —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏, –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ',
    category: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞',
    fields: [
      { name: 'seller_name', label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞', type: 'text', required: true },
      { name: 'product_name', label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', type: 'text', required: true },
      { name: 'purchase_date', label: '–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏', type: 'date', required: true },
      { name: 'defect_description', label: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞', type: 'textarea', required: true },
    ]
  },
  {
    id: 'family',
    name: '–°–µ–º–µ–π–Ω—ã–π —Å–ø–æ—Ä',
    icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    description: '–†–∞–∑–≤–æ–¥—ã, –∞–ª–∏–º–µ–Ω—Ç—ã, —Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞',
    category: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ',
    fields: [
      { name: 'dispute_type', label: '–¢–∏–ø —Å–ø–æ—Ä–∞', type: 'select', options: ['–†–∞–∑–≤–æ–¥', '–ê–ª–∏–º–µ–Ω—Ç—ã', '–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞', '–û–ø–µ–∫–∞ –Ω–∞–¥ –¥–µ—Ç—å–º–∏', '–î—Ä—É–≥–æ–µ'], required: true },
      { name: 'marriage_date', label: '–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞–∫–∞', type: 'date', required: false },
      { name: 'children_count', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π', type: 'number', required: false },
      { name: 'property_value', label: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–º—É—â–µ—Å—Ç–≤–∞', type: 'number', required: false },
    ]
  },
  {
    id: 'banking',
    name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–ø–æ—Ä',
    icon: 'üè¶',
    description: '–°–ø–æ—Ä—ã —Å –±–∞–Ω–∫–∞–º–∏, –∫—Ä–µ–¥–∏—Ç—ã, –≤–∫–ª–∞–¥—ã',
    category: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
    fields: [
      { name: 'bank_name', label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞', type: 'text', required: true },
      { name: 'service_type', label: '–¢–∏–ø —É—Å–ª—É–≥–∏', type: 'select', options: ['–ö—Ä–µ–¥–∏—Ç', '–í–∫–ª–∞–¥', '–ö–∞—Ä—Ç–∞', '–ü–µ—Ä–µ–≤–æ–¥—ã', '–î—Ä—É–≥–æ–µ'], required: true },
      { name: 'contract_number', label: '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞', type: 'text', required: false },
      { name: 'dispute_amount', label: '–°—É–º–º–∞ —Å–ø–æ—Ä–∞', type: 'number', required: false },
    ]
  },
  {
    id: 'administrative',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Ä',
    icon: 'üèõÔ∏è',
    description: '–°–ø–æ—Ä—ã —Å –≥–æ—Å–æ—Ä–≥–∞–Ω–∞–º–∏, —à—Ç—Ä–∞—Ñ—ã, –ª–∏—Ü–µ–Ω–∑–∏–∏',
    category: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ',
    fields: [
      { name: 'authority_name', label: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∞', type: 'text', required: true },
      { name: 'violation_type', label: '–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è', type: 'select', options: ['–®—Ç—Ä–∞—Ñ', '–õ–∏—à–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏', '–û—Ç–∫–∞–∑ –≤ —É—Å–ª—É–≥–µ', '–î—Ä—É–≥–æ–µ'], required: true },
      { name: 'violation_date', label: '–î–∞—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è', type: 'date', required: false },
      { name: 'fine_amount', label: '–†–∞–∑–º–µ—Ä —à—Ç—Ä–∞—Ñ–∞', type: 'number', required: false },
    ]
  },
];

export default function NewDisputePage() {
  const router = useRouter();
  const { hapticFeedback, showAlert } = useTelegramUser();
  const [selectedType, setSelectedType] = useState<string>('');
  const [formData, setFormData] = useState<Record<string, string | number | boolean>>({});
  const [isCreating, setIsCreating] = useState(false);

  const selectedTypeData = DISPUTE_TYPES.find(type => type.id === selectedType);

  const handleTypeSelect = (typeId: string) => {
    hapticFeedback('light');
    setSelectedType(typeId);
    setFormData({});
  };

  const handleFieldChange = (fieldName: string, value: string | number | boolean) => {
    setFormData(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  const handleCreate = async () => {
    if (!selectedTypeData) return;

    const requiredFields = selectedTypeData.fields.filter(field => field.required);
    const missingFields = requiredFields.filter(field => !formData[field.name]);

    if (missingFields.length > 0) {
      showAlert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.map(f => f.label).join(', ')}`);
      return;
    }

    setIsCreating(true);
    hapticFeedback('medium');

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      showAlert('–°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! AI-—é—Ä–∏—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.');
      router.push('/disputes');
    } catch (error) {
      showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–æ—Ä–∞');
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100">
      <BackButton />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            ‚öñÔ∏è –ù–æ–≤—ã–π —Å–ø–æ—Ä
          </h1>
          <p className="text-gray-600">
            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–≤–æ–≤–æ–π —Å–ø–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ AI-—é—Ä–∏—Å—Ç–æ–º
          </p>
        </div>

        {/* Type Selection */}
        {!selectedType && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä–∞</CardTitle>
              <CardDescription>
                –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ø–æ—Ä–∞
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {DISPUTE_TYPES.map((type) => (
                  <HapticFeedback key={type.id} type="light">
                    <button
                      onClick={() => handleTypeSelect(type.id)}
                      className="p-4 rounded-xl border-2 border-gray-200 bg-white hover:border-purple-300 hover:shadow-sm transition-all duration-200 text-left"
                    >
                      <div className="flex items-start space-x-3">
                        <span className="text-2xl">{type.icon}</span>
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 mb-1">
                            {type.name}
                          </h3>
                          <p className="text-sm text-gray-600 mb-2">
                            {type.description}
                          </p>
                          <Badge variant="info" className="text-xs">
                            {type.category}
                          </Badge>
                        </div>
                      </div>
                    </button>
                  </HapticFeedback>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Form */}
        {selectedTypeData && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>{selectedTypeData.icon}</span>
                <span>{selectedTypeData.name}</span>
              </CardTitle>
              <CardDescription>
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–ø–æ—Ä–µ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {selectedTypeData.fields.map((field) => (
                  <div key={field.name}>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      {field.label}
                      {field.required && <span className="text-red-500 ml-1">*</span>}
                    </label>
                    
                    {field.type === 'text' && (
                      <input
                        type="text"
                        value={formData[field.name] || ''}
                        onChange={(e) => handleFieldChange(field.name, e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        placeholder={`–í–≤–µ–¥–∏—Ç–µ ${field.label.toLowerCase()}`}
                      />
                    )}
                    
                    {field.type === 'number' && (
                      <input
                        type="number"
                        value={formData[field.name] || ''}
                        onChange={(e) => handleFieldChange(field.name, parseFloat(e.target.value) || 0)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        placeholder={`–í–≤–µ–¥–∏—Ç–µ ${field.label.toLowerCase()}`}
                      />
                    )}
                    
                    {field.type === 'date' && (
                      <input
                        type="date"
                        value={formData[field.name] || ''}
                        onChange={(e) => handleFieldChange(field.name, e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      />
                    )}
                    
                    {field.type === 'textarea' && (
                      <textarea
                        value={formData[field.name] || ''}
                        onChange={(e) => handleFieldChange(field.name, e.target.value)}
                        rows={4}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none"
                        placeholder={`–û–ø–∏—à–∏—Ç–µ ${field.label.toLowerCase()}`}
                      />
                    )}
                    
                    {field.type === 'select' && (
                      <select
                        value={formData[field.name] || ''}
                        onChange={(e) => handleFieldChange(field.name, e.target.value)}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é</option>
                        {field.options?.map((option) => (
                          <option key={option} value={option}>
                            {option}
                          </option>
                        ))}
                      </select>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Additional Information */}
        {selectedTypeData && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
              <CardDescription>
                –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Å–ø–æ—Ä–∞
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
                  </label>
                  <textarea
                    value={formData.description || ''}
                    onChange={(e) => handleFieldChange('description', e.target.value)}
                    rows={4}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none"
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ–ª–∞ –∫ —Å–ø–æ—Ä—É..."
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                  </label>
                  <textarea
                    value={formData.requirements || ''}
                    onChange={(e) => handleFieldChange('requirements', e.target.value)}
                    rows={3}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none"
                    placeholder="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞?"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                  </label>
                  <textarea
                    value={formData.evidence || ''}
                    onChange={(e) => handleFieldChange('evidence', e.target.value)}
                    rows={3}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none"
                    placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–º–µ—é—â–∏–µ—Å—è —É –≤–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è..."
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Create Button */}
        {selectedTypeData && (
          <div className="text-center mb-6">
            <HapticFeedback type="medium">
              <Button
                variant="default"
                size="xl"
                onClick={handleCreate}
                loading={isCreating}
                disabled={isCreating}
                className="px-8 py-4 text-lg bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
              >
                {isCreating ? '–°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä...' : '–°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä'}
              </Button>
            </HapticFeedback>
          </div>
        )}

        {/* Tips */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–ø–æ—Ä–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm text-gray-600">
              <li className="flex items-start space-x-2">
                <span className="text-purple-500 mt-1">‚úì</span>
                <span>–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-purple-500 mt-1">‚úì</span>
                <span>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –¥–∞—Ç—ã, —Å—É–º–º—ã –∏ —Ñ–∞–∫—Ç—ã</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-purple-500 mt-1">‚úì</span>
                <span>–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-purple-500 mt-1">‚úì</span>
                <span>–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-purple-500 mt-1">‚úì</span>
                <span>AI-—é—Ä–∏—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à —Å–ª—É—á–∞–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</span>
              </li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}