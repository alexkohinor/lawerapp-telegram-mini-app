'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { HapticFeedback } from '@/components/telegram/HapticFeedback';
import { BackButton } from '@/components/telegram/BackButton';
import { useTelegramUser } from '@/hooks/useTelegramUser';

interface Dispute {
  id: string;
  title: string;
  type: string;
  icon: string;
  category: string;
  status: 'active' | 'resolved' | 'pending' | 'escalated' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  opponent: string;
  amount?: number;
  createdAt: string;
  updatedAt: string;
  description: string;
  requirements: string;
  evidence: string;
  timeline: Array<{
    id: string;
    date: string;
    action: string;
    description: string;
    status: 'completed' | 'pending' | 'in_progress';
  }>;
  nextAction?: string;
  nextActionDate?: string;
  aiAnalysis?: string;
  recommendations?: string[];
}

const MOCK_DISPUTE: Dispute = {
  id: '1',
  title: '–°–ø–æ—Ä —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–≤–∞—Ä—Ç–∏—Ä—ã',
  type: '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Å–ø–æ—Ä',
  icon: 'üè†',
  category: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  status: 'active',
  priority: 'high',
  opponent: '–û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"',
  amount: 500000,
  createdAt: '2024-01-15T10:30:00Z',
  updatedAt: '2024-01-20T14:15:00Z',
  description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–µ–∫—Ç—ã –≤ –æ—Ç–¥–µ–ª–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è. –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω—è—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏.',
  requirements: '–¢—Ä–µ–±—É—é —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–∞—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Ä–∞–∑–º–µ—Ä–µ 500 000 —Ä—É–±–ª–µ–π.',
  evidence: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤, –∞–∫—Ç –ø—Ä–∏–µ–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–≥–æ–≤–æ—Ä –¥–æ–ª–µ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è, –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º.',
  timeline: [
    {
      id: '1',
      date: '2024-01-15T10:30:00Z',
      action: '–°–ø–æ—Ä —Å–æ–∑–¥–∞–Ω',
      description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª —Å–ø–æ—Ä —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º',
      status: 'completed'
    },
    {
      id: '2',
      date: '2024-01-16T09:15:00Z',
      action: 'AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: 'AI-—é—Ä–∏—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      status: 'completed'
    },
    {
      id: '3',
      date: '2024-01-18T14:20:00Z',
      action: '–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      description: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫—É',
      status: 'completed'
    },
    {
      id: '4',
      date: '2024-01-25T00:00:00Z',
      action: '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞',
      description: '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞',
      status: 'in_progress'
    },
    {
      id: '5',
      date: '2024-02-01T00:00:00Z',
      action: '–ü–æ–¥–∞—á–∞ –∏—Å–∫–∞',
      description: '–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞ - –ø–æ–¥–∞—á–∞ –∏—Å–∫–∞ –≤ —Å—É–¥',
      status: 'pending'
    }
  ],
  nextAction: '–ü–æ–¥–∞—á–∞ –∏—Å–∫–∞ –≤ —Å—É–¥',
  nextActionDate: '2024-02-01T00:00:00Z',
  aiAnalysis: '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö. –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫ –æ–±—è–∑–∞–Ω —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –¥–æ–ª–µ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–µ—Ç–µ–Ω–∑–∏—è ‚Üí —Å—É–¥.',
  recommendations: [
    '–°–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞)',
    '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥',
    '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞—Ü–∏–∏',
    '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞'
  ]
};

export default function DisputeDetailPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const { hapticFeedback, showAlert } = useTelegramUser();
  const [dispute] = useState<Dispute>(MOCK_DISPUTE);

  const getStatusBadge = (status: Dispute['status']) => {
    switch (status) {
      case 'active':
        return <Badge variant="warning">–ê–∫—Ç–∏–≤–Ω—ã–π</Badge>;
      case 'pending':
        return <Badge variant="info">–û–∂–∏–¥–∞–µ—Ç</Badge>;
      case 'escalated':
        return <Badge variant="danger">–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω</Badge>;
      case 'resolved':
        return <Badge variant="success">–†–µ—à–µ–Ω</Badge>;
      case 'closed':
        return <Badge variant="secondary">–ó–∞–∫—Ä—ã—Ç</Badge>;
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  const getPriorityBadge = (priority: Dispute['priority']) => {
    switch (priority) {
      case 'urgent':
        return <Badge variant="danger" className="text-xs">–°–†–û–ß–ù–û</Badge>;
      case 'high':
        return <Badge variant="warning" className="text-xs">–í–´–°–û–ö–ò–ô</Badge>;
      case 'medium':
        return <Badge variant="info" className="text-xs">–°–†–ï–î–ù–ò–ô</Badge>;
      case 'low':
        return <Badge variant="secondary" className="text-xs">–ù–ò–ó–ö–ò–ô</Badge>;
      default:
        return <Badge variant="secondary" className="text-xs">–ù–ï–ò–ó–í–ï–°–¢–ù–û</Badge>;
    }
  };

  const getTimelineStatusBadge = (status: 'completed' | 'pending' | 'in_progress') => {
    switch (status) {
      case 'completed':
        return <Badge variant="success" className="text-xs">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</Badge>;
      case 'in_progress':
        return <Badge variant="warning" className="text-xs">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</Badge>;
      case 'pending':
        return <Badge variant="info" className="text-xs">–û–∂–∏–¥–∞–µ—Ç</Badge>;
      default:
        return <Badge variant="secondary" className="text-xs">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const formatAmount = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const handleBackToDisputes = () => {
    hapticFeedback('light');
    router.push('/disputes');
  };

  const handleEdit = () => {
    hapticFeedback('light');
    router.push(`/disputes/${dispute.id}/edit`);
  };

  const handleChat = () => {
    hapticFeedback('light');
    router.push(`/disputes/${dispute.id}/chat`);
  };

  const handleDocuments = () => {
    hapticFeedback('light');
    router.push(`/disputes/${dispute.id}/documents`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100">
      <BackButton onClick={handleBackToDisputes} />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              ‚öñÔ∏è {dispute.title}
            </h1>
            <p className="text-gray-600">
              {formatDate(dispute.createdAt)}
            </p>
          </div>
          <div className="flex items-center space-x-2">
            {getPriorityBadge(dispute.priority)}
            {getStatusBadge(dispute.status)}
          </div>
        </div>

        {/* Dispute Info */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{dispute.icon}</span>
              <div>
                <h3 className="font-semibold text-gray-900">
                  {dispute.type}
                </h3>
                <p className="text-sm text-gray-600">
                  {dispute.category} ‚Ä¢ –ü—Ä–æ—Ç–∏–≤: {dispute.opponent}
                </p>
                {dispute.amount && (
                  <p className="text-sm font-semibold text-purple-600">
                    –°—É–º–º–∞ —Å–ø–æ—Ä–∞: {formatAmount(dispute.amount)}
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Description */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">
              {dispute.description}
            </p>
          </CardContent>
        </Card>

        {/* Requirements */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">
              {dispute.requirements}
            </p>
          </CardContent>
        </Card>

        {/* Evidence */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">
              {dispute.evidence}
            </p>
          </CardContent>
        </Card>

        {/* AI Analysis */}
        {dispute.aiAnalysis && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>ü§ñ</span>
                <span>–ê–Ω–∞–ª–∏–∑ AI-—é—Ä–∏—Å—Ç–∞</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-blue-50 p-4 rounded-lg">
                <p className="text-blue-800 leading-relaxed">
                  {dispute.aiAnalysis}
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Recommendations */}
        {dispute.recommendations && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {dispute.recommendations.map((recommendation, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span className="text-gray-700">{recommendation}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        )}

        {/* Timeline */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–ø–æ—Ä–∞</CardTitle>
            <CardDescription>
              –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é —Å–ø–æ—Ä–∞
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {dispute.timeline.map((item, index) => (
                <div key={item.id} className="flex items-start space-x-4">
                  <div className={`w-3 h-3 rounded-full mt-2 ${
                    item.status === 'completed' ? 'bg-green-500' :
                    item.status === 'in_progress' ? 'bg-yellow-500' :
                    'bg-gray-300'
                  }`}></div>
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <h4 className="font-semibold text-gray-900">
                        {item.action}
                      </h4>
                      {getTimelineStatusBadge(item.status)}
                    </div>
                    <p className="text-sm text-gray-600 mb-1">
                      {item.description}
                    </p>
                    <p className="text-xs text-gray-400">
                      {formatDate(item.date)}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Next Action */}
        {dispute.nextAction && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>–°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h4 className="font-semibold text-yellow-900 mb-2">
                  {dispute.nextAction}
                </h4>
                {dispute.nextActionDate && (
                  <p className="text-sm text-yellow-700">
                    –°—Ä–æ–∫: {formatDate(dispute.nextActionDate)}
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <HapticFeedback type="medium">
            <Button
              variant="default"
              onClick={handleChat}
              className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              üí¨ –ß–∞—Ç —Å AI
            </Button>
          </HapticFeedback>
          
          <HapticFeedback type="light">
            <Button
              variant="outline"
              onClick={handleDocuments}
              className="border-green-300 text-green-700 hover:bg-green-50"
            >
              üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã
            </Button>
          </HapticFeedback>
          
          <HapticFeedback type="light">
            <Button
              variant="outline"
              onClick={handleEdit}
              className="border-blue-300 text-blue-700 hover:bg-blue-50"
            >
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
          </HapticFeedback>
        </div>

        {/* Legal Notice */}
        <Card>
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <span className="text-yellow-500 text-xl">‚ö†Ô∏è</span>
              <div className="text-sm text-gray-600">
                <p className="font-semibold mb-1">–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
                <p>
                  –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI-—é—Ä–∏—Å—Ç–∞ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç 
                  –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ 
                  —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}