'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { HapticFeedback } from '@/components/telegram/HapticFeedback';
import { BackButton } from '@/components/telegram/BackButton';
import { useTelegramUser } from '@/hooks/useTelegramUser';

interface Dispute {
  id: string;
  title: string;
  type: string;
  icon: string;
  category: string;
  status: 'active' | 'resolved' | 'pending' | 'escalated' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  opponent: string;
  amount?: number;
  createdAt: string;
  updatedAt: string;
  description: string;
  nextAction?: string;
  nextActionDate?: string;
}

const MOCK_DISPUTES: Dispute[] = [
  {
    id: '1',
    title: '–°–ø–æ—Ä —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–≤–∞—Ä—Ç–∏—Ä—ã',
    type: '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Å–ø–æ—Ä',
    icon: 'üè†',
    category: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
    status: 'active',
    priority: 'high',
    opponent: '–û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"',
    amount: 500000,
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-20T14:15:00Z',
    description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–µ–∫—Ç—ã –≤ –æ—Ç–¥–µ–ª–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è',
    nextAction: '–ü–æ–¥–∞—á–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏',
    nextActionDate: '2024-01-25T00:00:00Z',
  },
  {
    id: '2',
    title: '–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
    type: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π',
    icon: 'üõí',
    category: '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞',
    status: 'pending',
    priority: 'medium',
    opponent: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω "–¢–µ—Ö–Ω–æ–ú–∏—Ä"',
    amount: 25000,
    createdAt: '2024-01-18T09:20:00Z',
    updatedAt: '2024-01-18T09:20:00Z',
    description: '–¢–æ–≤–∞—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º',
    nextAction: '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞',
    nextActionDate: '2024-01-28T00:00:00Z',
  },
  {
    id: '3',
    title: '–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä –ø–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏—é',
    type: '–¢—Ä—É–¥–æ–≤–æ–π —Å–ø–æ—Ä',
    icon: 'üë∑',
    category: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
    status: 'escalated',
    priority: 'urgent',
    opponent: '–û–û–û "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"',
    amount: 150000,
    createdAt: '2024-01-10T16:45:00Z',
    updatedAt: '2024-01-22T11:30:00Z',
    description: '–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–µ–∑ –≤—ã–ø–ª–∞—Ç—ã –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏',
    nextAction: '–ü–æ–¥–∞—á–∞ –∏—Å–∫–∞ –≤ —Å—É–¥',
    nextActionDate: '2024-01-30T00:00:00Z',
  },
  {
    id: '4',
    title: '–°–ø–æ—Ä –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º',
    type: '–°–µ–º–µ–π–Ω—ã–π —Å–ø–æ—Ä',
    icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    category: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ',
    status: 'resolved',
    priority: 'high',
    opponent: '–ë—ã–≤—à–∏–π —Å—É–ø—Ä—É–≥',
    amount: 30000,
    createdAt: '2024-01-05T12:00:00Z',
    updatedAt: '2024-01-19T15:20:00Z',
    description: '–í–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∞–ª–∏–º–µ–Ω—Ç–∞–º',
    nextAction: '–î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–∞—á–µ',
  },
  {
    id: '5',
    title: '–°–ø–æ—Ä —Å –±–∞–Ω–∫–æ–º –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
    type: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å–ø–æ—Ä',
    icon: 'üè¶',
    category: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
    status: 'closed',
    priority: 'medium',
    opponent: '–ü–ê–û "–°–±–µ—Ä–±–∞–Ω–∫"',
    amount: 100000,
    createdAt: '2023-12-20T14:30:00Z',
    updatedAt: '2024-01-15T10:00:00Z',
    description: '–°–ø–æ—Ä –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
  },
];

export default function DisputesPage() {
  const router = useRouter();
  const { hapticFeedback } = useTelegramUser();
  const [disputes] = useState<Dispute[]>(MOCK_DISPUTES);
  const [filter, setFilter] = useState<'all' | 'active' | 'pending' | 'escalated' | 'resolved' | 'closed'>('all');

  const filteredDisputes = disputes.filter(dispute => 
    filter === 'all' || dispute.status === filter
  );

  const getStatusBadge = (status: Dispute['status']) => {
    switch (status) {
      case 'active':
        return <Badge variant="warning">–ê–∫—Ç–∏–≤–Ω—ã–π</Badge>;
      case 'pending':
        return <Badge variant="info">–û–∂–∏–¥–∞–µ—Ç</Badge>;
      case 'escalated':
        return <Badge variant="danger">–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω</Badge>;
      case 'resolved':
        return <Badge variant="success">–†–µ—à–µ–Ω</Badge>;
      case 'closed':
        return <Badge variant="secondary">–ó–∞–∫—Ä—ã—Ç</Badge>;
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  const getPriorityBadge = (priority: Dispute['priority']) => {
    switch (priority) {
      case 'urgent':
        return <Badge variant="danger" className="text-xs">–°–†–û–ß–ù–û</Badge>;
      case 'high':
        return <Badge variant="warning" className="text-xs">–í–´–°–û–ö–ò–ô</Badge>;
      case 'medium':
        return <Badge variant="info" className="text-xs">–°–†–ï–î–ù–ò–ô</Badge>;
      case 'low':
        return <Badge variant="secondary" className="text-xs">–ù–ò–ó–ö–ò–ô</Badge>;
      default:
        return <Badge variant="secondary" className="text-xs">–ù–ï–ò–ó–í–ï–°–¢–ù–û</Badge>;
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const formatAmount = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const handleDisputeClick = (dispute: Dispute) => {
    hapticFeedback('light');
    router.push(`/disputes/${dispute.id}`);
  };

  const handleNewDispute = () => {
    hapticFeedback('medium');
    router.push('/disputes/new');
  };

  const getStatusCount = (status: Dispute['status']) => {
    return disputes.filter(dispute => dispute.status === status).length;
  };

  const getTotalAmount = () => {
    return disputes
      .filter(dispute => dispute.status === 'active' || dispute.status === 'pending' || dispute.status === 'escalated')
      .reduce((sum, dispute) => sum + (dispute.amount || 0), 0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100">
      <BackButton />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              ‚öñÔ∏è –ú–æ–∏ —Å–ø–æ—Ä—ã
            </h1>
            <p className="text-gray-600">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –ø—Ä–∞–≤–æ–≤—ã–º–∏ —Å–ø–æ—Ä–∞–º–∏
            </p>
          </div>
          <HapticFeedback type="medium">
            <Button
              variant="default"
              onClick={handleNewDispute}
              className="px-6 bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              –ù–æ–≤—ã–π —Å–ø–æ—Ä
            </Button>
          </HapticFeedback>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-gray-900">
                {disputes.length}
              </div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —Å–ø–æ—Ä–æ–≤</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {getStatusCount('active') + getStatusCount('pending') + getStatusCount('escalated')}
              </div>
              <div className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {getStatusCount('resolved')}
              </div>
              <div className="text-sm text-gray-600">–†–µ—à–µ–Ω–æ</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">
                {formatAmount(getTotalAmount())}
              </div>
              <div className="text-sm text-gray-600">–°—É–º–º–∞ —Å–ø–æ—Ä–æ–≤</div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex flex-wrap gap-2">
              {[
                { key: 'all', label: '–í—Å–µ', count: disputes.length },
                { key: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', count: getStatusCount('active') },
                { key: 'pending', label: '–û–∂–∏–¥–∞—é—Ç', count: getStatusCount('pending') },
                { key: 'escalated', label: '–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω—ã', count: getStatusCount('escalated') },
                { key: 'resolved', label: '–†–µ—à–µ–Ω—ã', count: getStatusCount('resolved') },
                { key: 'closed', label: '–ó–∞–∫—Ä—ã—Ç—ã', count: getStatusCount('closed') },
              ].map(({ key, label, count }) => (
                <HapticFeedback key={key} type="light">
                  <Button
                    variant={filter === key ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setFilter(key as typeof filter)}
                    className="relative"
                  >
                    {label}
                    {count > 0 && (
                      <Badge 
                        variant="secondary" 
                        className="ml-2 px-1.5 py-0.5 text-xs"
                      >
                        {count}
                      </Badge>
                    )}
                  </Button>
                </HapticFeedback>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Disputes List */}
        <div className="space-y-4">
          {filteredDisputes.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <div className="text-6xl mb-4">‚öñÔ∏è</div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  –ù–µ—Ç —Å–ø–æ—Ä–æ–≤
                </h3>
                <p className="text-gray-600 mb-4">
                  {filter === 'all' 
                    ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ø–æ—Ä–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!'
                    : '–ù–µ—Ç —Å–ø–æ—Ä–æ–≤ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º'
                  }
                </p>
                {filter === 'all' && (
                  <HapticFeedback type="medium">
                    <Button
                      variant="default"
                      onClick={handleNewDispute}
                      className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                    >
                      –°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä
                    </Button>
                  </HapticFeedback>
                )}
              </CardContent>
            </Card>
          ) : (
            filteredDisputes.map((dispute) => (
              <HapticFeedback key={dispute.id} type="light">
                <Card 
                  className="cursor-pointer hover:shadow-md transition-shadow duration-200"
                  onClick={() => handleDisputeClick(dispute)}
                >
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{dispute.icon}</span>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <h3 className="font-semibold text-gray-900">
                              {dispute.title}
                            </h3>
                            {getPriorityBadge(dispute.priority)}
                          </div>
                          <p className="text-sm text-gray-500 mb-1">
                            {dispute.type} ‚Ä¢ {dispute.opponent}
                          </p>
                          <p className="text-xs text-gray-400">
                            {formatDate(dispute.createdAt)}
                          </p>
                        </div>
                      </div>
                      {getStatusBadge(dispute.status)}
                    </div>
                    
                    <p className="text-gray-700 mb-4 line-clamp-2">
                      {dispute.description}
                    </p>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        {dispute.amount && (
                          <div className="text-sm font-semibold text-purple-600">
                            {formatAmount(dispute.amount)}
                          </div>
                        )}
                        <Badge variant="info" className="text-xs">
                          {dispute.category}
                        </Badge>
                      </div>
                      
                      {dispute.nextAction && (
                        <div className="text-right">
                          <p className="text-xs text-gray-500">
                            –°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                          </p>
                          <p className="text-sm font-medium text-gray-900">
                            {dispute.nextAction}
                          </p>
                          {dispute.nextActionDate && (
                            <p className="text-xs text-gray-400">
                              {formatDate(dispute.nextActionDate)}
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </HapticFeedback>
            ))
          )}
        </div>

        {/* Quick Actions */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="text-lg">üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <HapticFeedback type="light">
                <Button
                  variant="outline"
                  onClick={() => router.push('/disputes/new')}
                  className="h-auto p-4 text-left justify-start"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-xl">‚öñÔ∏è</span>
                    <div>
                      <div className="font-semibold">–°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä</div>
                      <div className="text-xs text-gray-500">–ù–æ–≤—ã–π –ø—Ä–∞–≤–æ–≤–æ–π —Å–ø–æ—Ä</div>
                    </div>
                  </div>
                </Button>
              </HapticFeedback>
              
              <HapticFeedback type="light">
                <Button
                  variant="outline"
                  onClick={() => setFilter('active')}
                  className="h-auto p-4 text-left justify-start"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-xl">üî•</span>
                    <div>
                      <div className="font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã</div>
                      <div className="text-xs text-gray-500">{getStatusCount('active')} —Å–ø–æ—Ä–æ–≤</div>
                    </div>
                  </div>
                </Button>
              </HapticFeedback>
              
              <HapticFeedback type="light">
                <Button
                  variant="outline"
                  onClick={() => setFilter('escalated')}
                  className="h-auto p-4 text-left justify-start"
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-xl">üö®</span>
                    <div>
                      <div className="font-semibold">–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</div>
                      <div className="text-xs text-gray-500">{getStatusCount('escalated')} —Å–ø–æ—Ä–æ–≤</div>
                    </div>
                  </div>
                </Button>
              </HapticFeedback>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}