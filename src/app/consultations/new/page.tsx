'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { HapticFeedback } from '@/components/telegram/HapticFeedback';
import { BackButton } from '@/components/telegram/BackButton';
import { useTelegramUser } from '@/hooks/useTelegramUser';

const LEGAL_CATEGORIES = [
  { id: 'labor', name: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', icon: 'üë∑', description: '–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã, —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –∑–∞—Ä–ø–ª–∞—Ç–∞' },
  { id: 'civil', name: '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', icon: 'üè†', description: '–î–æ–≥–æ–≤–æ—Ä—ã, —Å–¥–µ–ª–∫–∏, –∏–º—É—â–µ—Å—Ç–≤–æ' },
  { id: 'family', name: '–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', description: '–†–∞–∑–≤–æ–¥—ã, –∞–ª–∏–º–µ–Ω—Ç—ã, –æ–ø–µ–∫–∞' },
  { id: 'criminal', name: '–£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', icon: '‚öñÔ∏è', description: '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∑–∞—â–∏—Ç–∞, –æ–±–≤–∏–Ω–µ–Ω–∏—è' },
  { id: 'administrative', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', icon: 'üèõÔ∏è', description: '–®—Ç—Ä–∞—Ñ—ã, –ª–∏—Ü–µ–Ω–∑–∏–∏, –≥–æ—Å—É—Å–ª—É–≥–∏' },
  { id: 'tax', name: '–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø—Ä–∞–≤–æ', icon: 'üí∞', description: '–ù–∞–ª–æ–≥–∏, –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏' },
  { id: 'consumer', name: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π', icon: 'üõí', description: '–í–æ–∑–≤—Ä–∞—Ç—ã, –≥–∞—Ä–∞–Ω—Ç–∏–∏, –∫–∞—á–µ—Å—Ç–≤–æ' },
  { id: 'business', name: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–∞–≤–æ', icon: 'üè¢', description: '–ë–∏–∑–Ω–µ—Å, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ª–∏—Ü–µ–Ω–∑–∏–∏' },
];

export default function NewConsultationPage() {
  const router = useRouter();
  const { hapticFeedback, showAlert } = useTelegramUser();
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [question, setQuestion] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleCategorySelect = (categoryId: string) => {
    hapticFeedback('light');
    setSelectedCategory(categoryId);
  };

  const handleSubmit = async () => {
    if (!selectedCategory || !question.trim()) {
      showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å');
      return;
    }

    setIsLoading(true);
    hapticFeedback('medium');

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      showAlert('–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! AI-—é—Ä–∏—Å—Ç –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç...');
      router.push('/consultations');
    } catch {
      showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const selectedCategoryData = LEGAL_CATEGORIES.find(cat => cat.id === selectedCategory);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <BackButton />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üí¨ AI –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
          </h1>
          <p className="text-gray-600">
            –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∞–≤–æ–≤—É—é –ø–æ–º–æ—â—å –æ—Ç –ò–ò-—é—Ä–∏—Å—Ç–∞
          </p>
        </div>

        {/* Category Selection */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∞–≤–∞</CardTitle>
            <CardDescription>
              –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç AI-—é—Ä–∏—Å—Ç—É –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {LEGAL_CATEGORIES.map((category) => (
                <HapticFeedback key={category.id} type="light">
                  <button
                    onClick={() => handleCategorySelect(category.id)}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 text-left ${
                      selectedCategory === category.id
                        ? 'border-blue-500 bg-blue-50 shadow-md'
                        : 'border-gray-200 bg-white hover:border-blue-300 hover:shadow-sm'
                    }`}
                  >
                    <div className="flex items-start space-x-3">
                      <span className="text-2xl">{category.icon}</span>
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 mb-1">
                          {category.name}
                        </h3>
                        <p className="text-sm text-gray-600">
                          {category.description}
                        </p>
                      </div>
                      {selectedCategory === category.id && (
                        <Badge variant="info">–í—ã–±—Ä–∞–Ω–æ</Badge>
                      )}
                    </div>
                  </button>
                </HapticFeedback>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Question Form */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é</CardTitle>
            <CardDescription>
              –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç
            </CardDescription>
          </CardHeader>
          <CardContent>
            <textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É —É–∂–µ 2 –º–µ—Å—è—Ü–∞. –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?"
              className="w-full h-32 p-4 border border-gray-300 rounded-xl resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              maxLength={1000}
            />
            <div className="flex justify-between items-center mt-2">
              <p className="text-sm text-gray-500">
                {question.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤
              </p>
              {question.length > 100 && (
                <Badge variant="success">–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ</Badge>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Selected Category Summary */}
        {selectedCategoryData && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>{selectedCategoryData.icon}</span>
                <span>–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-blue-900 mb-1">
                  {selectedCategoryData.name}
                </h3>
                <p className="text-blue-700 text-sm">
                  {selectedCategoryData.description}
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Submit Button */}
        <div className="text-center">
          <HapticFeedback type="medium">
            <Button
              variant="default"
              size="xl"
              onClick={handleSubmit}
              loading={isLoading}
              disabled={!selectedCategory || !question.trim() || isLoading}
              className="px-8 py-4 text-lg bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
            >
              {isLoading ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å...' : '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'}
            </Button>
          </HapticFeedback>
        </div>

        {/* Tips */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="text-lg">üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm text-gray-600">
              <li className="flex items-start space-x-2">
                <span className="text-green-500 mt-1">‚úì</span>
                <span>–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-green-500 mt-1">‚úì</span>
                <span>–£–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ —Å—Ä–æ–∫–∏</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-green-500 mt-1">‚úì</span>
                <span>–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å</span>
              </li>
              <li className="flex items-start space-x-2">
                <span className="text-green-500 mt-1">‚úì</span>
                <span>–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</span>
              </li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}