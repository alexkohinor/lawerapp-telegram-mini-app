'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { HapticFeedback } from '@/components/telegram/HapticFeedback';
import { BackButton } from '@/components/telegram/BackButton';
import { useTelegramUser } from '@/hooks/useTelegramUser';

interface Consultation {
  id: string;
  category: string;
  categoryIcon: string;
  question: string;
  answer?: string;
  status: 'pending' | 'completed' | 'in_progress';
  createdAt: string;
  updatedAt: string;
  followUpQuestions?: string[];
}

const MOCK_CONSULTATION: Consultation = {
  id: '1',
  category: '–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ',
  categoryIcon: 'üë∑',
  question: '–ú–æ–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É —É–∂–µ 2 –º–µ—Å—è—Ü–∞. –ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?',
  answer: `–°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç. 136 –¢–ö –†–§, –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å—Å—è –Ω–µ —Ä–µ–∂–µ —á–µ–º –∫–∞–∂–¥—ã–µ –ø–æ–ª–º–µ—Å—è—Ü–∞. –í –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:

**1. –î–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:**
- –ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—É—é –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å
- –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç—ã
- –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–ø–∏—é –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –µ—ë –æ—Ç–ø—Ä–∞–≤–∫–∏

**2. –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã:**
- –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é —Ç—Ä—É–¥–∞
- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É –ø–æ –º–µ—Å—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
- –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –†–æ—Å—Ç—Ä—É–¥ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç

**3. –°—É–¥–µ–±–Ω–∞—è –∑–∞—â–∏—Ç–∞:**
- –ü–æ–¥–∞–π—Ç–µ –∏—Å–∫ –≤ —Å—É–¥ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ
- –¢—Ä–µ–±—É–π—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞
- –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏)

**–í–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:**
- –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä
- –î–æ–∫—É–º–µ–Ω—Ç—ã –æ —Ä–∞–∑–º–µ—Ä–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
- –°–ø—Ä–∞–≤–∫–∏ –æ –Ω–µ–≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–µ
- –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º

**–°—Ä–æ–∫–∏:**
- –ò—Å–∫ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
- –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–ø–ª–∞—Ç–∏—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è`,
  status: 'completed',
  createdAt: '2024-01-15T10:30:00Z',
  updatedAt: '2024-01-15T10:45:00Z',
  followUpQuestions: [
    '–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é?',
    '–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞ –≤ —Å—É–¥?',
    '–ú–æ–∂–Ω–æ –ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞?',
    '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ–±—ä—è–≤–∏–ª —Å–µ–±—è –±–∞–Ω–∫—Ä–æ—Ç–æ–º?',
  ],
};

export default function ConsultationDetailPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const { hapticFeedback, showAlert } = useTelegramUser();
  const [consultation] = useState<Consultation>(MOCK_CONSULTATION);
  const [isAskingFollowUp, setIsAskingFollowUp] = useState(false);

  const getStatusBadge = (status: Consultation['status']) => {
    switch (status) {
      case 'completed':
        return <Badge variant="success">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
      case 'in_progress':
        return <Badge variant="warning">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</Badge>;
      case 'pending':
        return <Badge variant="info">–û–∂–∏–¥–∞–µ—Ç</Badge>;
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleFollowUpQuestion = (question: string) => {
    hapticFeedback('light');
    setIsAskingFollowUp(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    setTimeout(() => {
      showAlert('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! AI-—é—Ä–∏—Å—Ç –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç...');
      setIsAskingFollowUp(false);
    }, 2000);
  };

  const handleNewConsultation = () => {
    hapticFeedback('medium');
    router.push('/consultations/new');
  };

  const handleBackToConsultations = () => {
    hapticFeedback('light');
    router.push('/consultations');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <BackButton onClick={handleBackToConsultations} />
      
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation.id}
            </h1>
            <p className="text-gray-600">
              {formatDate(consultation.createdAt)}
            </p>
          </div>
          {getStatusBadge(consultation.status)}
        </div>

        {/* Category */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{consultation.categoryIcon}</span>
              <div>
                <h3 className="font-semibold text-gray-900">
                  {consultation.category}
                </h3>
                <p className="text-sm text-gray-600">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤–∞
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Question */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <span>‚ùì</span>
              <span>–í–∞—à –≤–æ–ø—Ä–æ—Å</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-blue-50 p-4 rounded-lg">
              <p className="text-gray-800 leading-relaxed">
                {consultation.question}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Answer */}
        {consultation.answer ? (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>ü§ñ</span>
                <span>–û—Ç–≤–µ—Ç AI-—é—Ä–∏—Å—Ç–∞</span>
              </CardTitle>
              <CardDescription>
                –û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="prose prose-sm max-w-none">
                  {consultation.answer.split('\n').map((paragraph, index) => {
                    if (paragraph.trim() === '') return <br key={index} />;
                    
                    if (paragraph.startsWith('**') && paragraph.endsWith('**')) {
                      return (
                        <h4 key={index} className="font-semibold text-green-900 mt-4 mb-2">
                          {paragraph.slice(2, -2)}
                        </h4>
                      );
                    }
                    
                    return (
                      <p key={index} className="text-green-800 leading-relaxed mb-2">
                        {paragraph}
                      </p>
                    );
                  })}
                </div>
              </div>
            </CardContent>
          </Card>
        ) : (
          <Card className="mb-6">
            <CardContent className="p-8 text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                AI-—é—Ä–∏—Å—Ç –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç
              </h3>
              <p className="text-gray-600">
                –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã
              </p>
            </CardContent>
          </Card>
        )}

        {/* Follow-up Questions */}
        {consultation.answer && consultation.followUpQuestions && (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <span>üí°</span>
                <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</span>
              </CardTitle>
              <CardDescription>
                –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —ç—Ç–∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {consultation.followUpQuestions.map((question, index) => (
                  <HapticFeedback key={index} type="light">
                    <button
                      onClick={() => handleFollowUpQuestion(question)}
                      disabled={isAskingFollowUp}
                      className="w-full p-3 text-left bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors duration-200 disabled:opacity-50"
                    >
                      <p className="text-sm text-gray-700">
                        {question}
                      </p>
                    </button>
                  </HapticFeedback>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Actions */}
        <div className="flex flex-col sm:flex-row gap-4">
          <HapticFeedback type="medium">
            <Button
              variant="gradient"
              onClick={handleNewConsultation}
              className="flex-1"
            >
              –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            </Button>
          </HapticFeedback>
          
          <HapticFeedback type="light">
            <Button
              variant="outline"
              onClick={handleBackToConsultations}
              className="flex-1"
            >
              –í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            </Button>
          </HapticFeedback>
        </div>

        {/* Legal Notice */}
        <Card className="mt-8">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <span className="text-yellow-500 text-xl">‚ö†Ô∏è</span>
              <div className="text-sm text-gray-600">
                <p className="font-semibold mb-1">–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
                <p>
                  –û—Ç–≤–µ—Ç—ã AI-—é—Ä–∏—Å—Ç–∞ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç 
                  –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–∞–≤–æ–≤—ã—Ö 
                  –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}