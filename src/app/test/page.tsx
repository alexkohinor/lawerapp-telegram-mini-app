'use client';

import React, { useState, useEffect } from 'react';

export default function TestPage() {
  const [telegramData, setTelegramData] = useState<{
    version: string;
    platform: string;
    colorScheme: string;
    user?: {
      first_name?: string;
    };
    themeParams: Record<string, string>;
  } | null>(null);
  const [testResults, setTestResults] = useState<string[]>([]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      setTelegramData({
        version: tg.version,
        platform: tg.platform,
        colorScheme: tg.colorScheme,
        user: tg.initDataUnsafe?.user,
        themeParams: tg.themeParams,
      });
      
      // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      tg.expand();
      
      addTestResult('‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
      addTestResult(`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${tg.platform}`);
      addTestResult(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${tg.initDataUnsafe?.user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    } else {
      addTestResult('‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ Telegram WebApp');
      addTestResult('üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }, []);

  const addTestResult = (message: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const testHaptic = () => {
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      addTestResult('‚úÖ –í–∏–±—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      addTestResult('‚ùå –í–∏–±—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  };

  const testAlert = () => {
    if (window.Telegram?.WebApp) {
      try {
        // –í –≤–µ—Ä—Å–∏–∏ 6.0 –º–Ω–æ–≥–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π alert
        alert('–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!');
        addTestResult('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ (—á–µ—Ä–µ–∑ alert)');
      } catch (error) {
        addTestResult(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message || error}`);
      }
    } else {
      alert('–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!');
      addTestResult('‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
    }
  };

  const testAPI = async () => {
    try {
      const response = await fetch('/api/health');
      if (response.ok) {
        const data = await response.json();
        addTestResult('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        addTestResult(`üìä –°—Ç–∞—Ç—É—Å: ${data.status}`);
      } else {
        addTestResult('‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      }
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ API: ${error}`);
    }
  };

  const testWebhook = async () => {
    try {
      const response = await fetch('/api/telegram/webhook', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          update_id: 1,
          message: {
            message_id: 1,
            from: { id: 123456789, first_name: 'Test', username: 'testuser' },
            chat: { id: 123456789, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/start'
          }
        })
      });
      
      if (response.ok) {
        addTestResult('‚úÖ Webhook API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else {
        addTestResult('‚ùå Webhook API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
      }
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ Webhook: ${error}`);
    }
  };

  const testStorage = () => {
    // CloudStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–µ—Ä—Å–∏–∏ 6.0, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –∫–∞–∫ fallback
    try {
      if (typeof Storage !== 'undefined') {
        localStorage.setItem('test_key', 'test_value');
        const value = localStorage.getItem('test_key');
        
        if (value === 'test_value') {
          addTestResult('‚úÖ Local Storage —Ä–∞–±–æ—Ç–∞–µ—Ç (CloudStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ v6.0)');
          localStorage.removeItem('test_key'); // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        } else {
          addTestResult('‚ùå Local Storage –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
      } else {
        addTestResult('‚ùå Storage API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ Storage: ${error.message || error}`);
    }
  };

  const closeApp = () => {
    if (window.Telegram?.WebApp) {
      window.Telegram.WebApp.close();
    } else {
      addTestResult('‚ùå –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">
          üß™ –¢–µ—Å—Ç Telegram Mini App
        </h1>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram */}
        {telegramData && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
            <h2 className="text-xl font-semibold text-blue-900 mb-3">
              üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram
            </h2>
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div><strong>–í–µ—Ä—Å–∏—è:</strong> {telegramData.version}</div>
              <div><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> {telegramData.platform}</div>
              <div><strong>–¢–µ–º–∞:</strong> {telegramData.colorScheme}</div>
              <div><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {telegramData.user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
          </h2>
          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={testHaptic}
              className="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors"
            >
              –¢–µ—Å—Ç –≤–∏–±—Ä–∞—Ü–∏–∏
            </button>
            <button
              onClick={testAlert}
              className="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
            >
              –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
            <button
              onClick={testAPI}
              className="bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors"
            >
              –¢–µ—Å—Ç API
            </button>
            <button
              onClick={testWebhook}
              className="bg-orange-600 text-white py-2 px-4 rounded-lg hover:bg-orange-700 transition-colors"
            >
              –¢–µ—Å—Ç Webhook
            </button>
            <button
              onClick={testStorage}
              className="bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors"
            >
              –¢–µ—Å—Ç Storage
            </button>
            <button
              onClick={closeApp}
              className="bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors"
            >
              –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </button>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
          </h2>
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {testResults.length === 0 ? (
              <p className="text-gray-500">–¢–µ—Å—Ç—ã –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã</p>
            ) : (
              testResults.map((result, index) => (
                <div
                  key={index}
                  className={`p-2 rounded text-sm ${
                    result.includes('‚úÖ') ? 'bg-green-50 text-green-800' :
                    result.includes('‚ùå') ? 'bg-red-50 text-red-800' :
                    result.includes('‚ö†Ô∏è') ? 'bg-yellow-50 text-yellow-800' :
                    'bg-gray-50 text-gray-800'
                  }`}
                >
                  {result}
                </div>
              ))
            )}
          </div>
        </div>

        {/* –°—Å—ã–ª–∫–∏ */}
        <div className="mt-6 text-center">
          <p className="text-gray-600 mb-2">
            üîó –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram:
          </p>
          <a
            href="https://t.me/miniappadvokat_bot?startapp=lawerapp"
            target="_blank"
            rel="noopener noreferrer"
            className="inline-block bg-blue-600 text-white py-2 px-6 rounded-lg hover:bg-blue-700 transition-colors"
          >
            –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
          </a>
        </div>
      </div>
    </div>
  );
}
