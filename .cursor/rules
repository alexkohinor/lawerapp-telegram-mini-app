# Правила Cursor для разработки Telegram Mini App

## Общие принципы разработки

### Технологический стек
- **Frontend**: React + TypeScript + Next.js
- **Стилизация**: Tailwind CSS + shadcn/ui
- **Telegram SDK**: @twa-dev/sdk
- **Состояние**: Zustand или React Query
- **Сборка**: Next.js с оптимизацией для Telegram WebApp
- **AI сервисы**: TimeWeb Cloud для RAG системы
- **База данных**: TimeWeb Cloud PostgreSQL

### Правила TypeScript
- **ЗАПРЕЩЕНО** использовать тип `any`
- Всегда используй строгую типизацию
- Создавай интерфейсы для всех объектов Telegram API
- Используй дженерики для переиспользуемых компонентов
- Применяй утилитарные типы (Pick, Omit, Partial)

### Архитектура проекта
```
src/
├── app/                # Next.js App Router
├── components/         # Переиспользуемые UI компоненты
├── lib/                # Core libraries
│   ├── ai/            # AI сервисы (TimeWeb Cloud)
│   ├── telegram/      # Telegram интеграция
│   ├── database/      # База данных (TimeWeb Cloud)
│   └── utils/         # Утилитарные функции
├── hooks/              # Кастомные React хуки
├── store/              # Управление состоянием
└── types/              # TypeScript типы
```

## Telegram Mini App специфика

### Инициализация Telegram WebApp
- Всегда проверяй доступность Telegram WebApp API
- Используй хуки для безопасного доступа к Telegram API
- Обрабатывай случаи, когда приложение запускается вне Telegram

### Безопасность
- Валидируй все данные от Telegram API
- Используй HTTPS для всех запросов
- Не храни чувствительные данные в localStorage
- Проверяй подлинность данных через Telegram

### UX/UI принципы
- Следуй дизайн-гайдам Telegram
- Используй темную тему по умолчанию
- Адаптируй интерфейс под мобильные устройства
- Реализуй поддержку жестов Telegram (swipe, pull-to-refresh)

## Правила кодирования

### Компоненты React
- Используй функциональные компоненты с хуками
- Применяй React.memo для оптимизации производительности
- Создавай переиспользуемые компоненты
- Используй PropTypes или TypeScript для валидации пропсов

### Стилизация
- Используй Tailwind CSS классы
- Создавай компоненты с shadcn/ui
- Следуй принципу mobile-first
- Используй CSS переменные для тем

### Управление состоянием
- Используй Zustand для глобального состояния
- React Query для серверного состояния
- Локальное состояние через useState/useReducer
- Избегай prop drilling

### Обработка ошибок
- Создавай Error Boundaries для компонентов
- Логируй ошибки в консоль разработки
- Показывай пользователю понятные сообщения об ошибках
- Обрабатывай сетевые ошибки gracefully

## Telegram API интеграция

### Основные методы
- `window.Telegram.WebApp.ready()` - инициализация
- `window.Telegram.WebApp.expand()` - развернуть на весь экран
- `window.Telegram.WebApp.close()` - закрыть приложение
- `window.Telegram.WebApp.sendData()` - отправить данные в бот

### Пользовательские данные
- Получай данные пользователя через `window.Telegram.WebApp.initData`
- Парси и валидируй initData
- Используй Telegram ID для идентификации пользователей

### Кнопки и навигация
- Используй `MainButton` и `BackButton` от Telegram
- Следуй паттернам навигации Telegram
- Обрабатывай события кнопок правильно

## Производительность

### Оптимизация
- Используй lazy loading для страниц
- Оптимизируй изображения (WebP, сжатие)
- Минимизируй bundle size
- Используй code splitting

### Мониторинг
- Отслеживай метрики производительности
- Логируй время загрузки
- Мониторь ошибки в продакшене

## Тестирование

### Unit тесты
- Покрывай тестами утилитарные функции
- Тестируй хуки и компоненты
- Используй Jest + React Testing Library

### Интеграционные тесты
- Тестируй интеграцию с Telegram API
- Проверяй работу в разных средах
- Тестируй на реальных устройствах

## Деплой и сборка

### Сборка
- Используй Vite для быстрой сборки
- Оптимизируй для продакшена
- Создавай source maps для отладки

### Деплой
- Настрой автоматический деплой
- Используй CDN для статических ресурсов
- Настрой мониторинг ошибок

## Безопасность данных

### Обработка данных
- Шифруй чувствительные данные
- Используй HTTPS везде
- Валидируй данные на клиенте и сервере
- Не доверяй данным от клиента
- Все данные храни в TimeWeb Cloud (Россия)

### Telegram специфика
- Проверяй подлинность initData
- Используй WebApp токены для авторизации
- Обрабатывай случаи подделки данных

### TimeWeb Cloud специфика
- Используй российскую инфраструктуру
- Соблюдай требования 152-ФЗ
- Все AI сервисы через TimeWeb Cloud
- Векторная база данных в TimeWeb Cloud

## Отладка и разработка

### Инструменты разработки
- Используй React DevTools
- Настрой hot reload
- Используй TypeScript strict mode
- Настрой ESLint и Prettier

### Логирование
- Логируй важные события
- Используй разные уровни логирования
- Не логируй чувствительные данные в продакшене

## Документация

### Код
- Пиши понятные комментарии
- Документируй сложную логику
- Используй JSDoc для функций
- Веди changelog

### API
- Документируй все API endpoints
- Создавай примеры использования
- Описывай ошибки и их обработку

## Соблюдение стандартов

### Код стайл
- Используй Prettier для форматирования
- Следуй ESLint правилам
- Используй консистентные имена переменных
- Применяй принципы SOLID

### Git
- Используй conventional commits
- Создавай осмысленные commit messages
- Веди feature branches
- Используй pull requests для code review

Эти правила помогут создать качественный, безопасный и производительный Telegram Mini App с соблюдением лучших практик разработки.
